!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.5.4	//
Alu32M	hdefs.h	/^         } Alu32M;$/;"	m
Alu32R	hdefs.h	/^         } Alu32R;$/;"	m
Bsfr32	hdefs.h	/^         } Bsfr32;$/;"	m
CMov32	hdefs.h	/^         } CMov32;$/;"	m
Call	hdefs.h	/^         } Call;$/;"	m
DEFAULT_FPUCW	isel.c	90;"	d	file:
Div	hdefs.h	/^         } Div;$/;"	m
Fp64to32	hdefs.h	/^         } Fp64to32;$/;"	m
FpBinary	hdefs.h	/^         } FpBinary;$/;"	m
FpCMov	hdefs.h	/^         } FpCMov;$/;"	m
FpCmp	hdefs.h	/^         } FpCmp;$/;"	m
FpLdCW	hdefs.h	/^         FpLdCW;$/;"	m
FpLdSt	hdefs.h	/^         } FpLdSt;$/;"	m
FpLdStI	hdefs.h	/^         } FpLdStI;$/;"	m
FpStSW_AX	hdefs.h	/^         FpStSW_AX;$/;"	m
FpUnary	hdefs.h	/^         } FpUnary;$/;"	m
Goto	hdefs.h	/^         } Goto;$/;"	m
IR	hdefs.h	/^         } IR;$/;"	m
IRRS	hdefs.h	/^         } IRRS;$/;"	m
ISelEnv	isel.c	/^   ISelEnv;$/;"	t	file:
Imm	hdefs.h	/^         } Imm;$/;"	m
Lea32	hdefs.h	/^         } Lea32;$/;"	m
LoadEX	hdefs.h	/^         } LoadEX;$/;"	m
MFence	hdefs.h	/^         } MFence;$/;"	m
Mem	hdefs.h	/^         } Mem;$/;"	m
MulL	hdefs.h	/^         } MulL;$/;"	m
Push	hdefs.h	/^         } Push;$/;"	m
REQUIRE_SSE1	isel.c	3054;"	d	file:
REQUIRE_SSE1	isel.c	3555;"	d	file:
REQUIRE_SSE2	isel.c	3059;"	d	file:
REQUIRE_SSE2	isel.c	3556;"	d	file:
Reg	hdefs.h	/^         } Reg;$/;"	m
SSE2_OR_ABOVE	isel.c	3064;"	d	file:
SSE2_OR_ABOVE	isel.c	3557;"	d	file:
Set32	hdefs.h	/^         } Set32;$/;"	m
Sh32	hdefs.h	/^         } Sh32;$/;"	m
Sh3232	hdefs.h	/^         } Sh3232;$/;"	m
Sse32FLo	hdefs.h	/^         } Sse32FLo;$/;"	m
Sse32Fx4	hdefs.h	/^         } Sse32Fx4;$/;"	m
Sse64FLo	hdefs.h	/^         } Sse64FLo;$/;"	m
Sse64Fx2	hdefs.h	/^         } Sse64Fx2;$/;"	m
SseCMov	hdefs.h	/^         } SseCMov;$/;"	m
SseConst	hdefs.h	/^         } SseConst;$/;"	m
SseLdSt	hdefs.h	/^         } SseLdSt;$/;"	m
SseLdzLO	hdefs.h	/^         } SseLdzLO;$/;"	m
SseReRg	hdefs.h	/^         } SseReRg;$/;"	m
SseShuf	hdefs.h	/^         } SseShuf;$/;"	m
Store	hdefs.h	/^         } Store;$/;"	m
Test32	hdefs.h	/^         } Test32;$/;"	m
Unary32	hdefs.h	/^         } Unary32;$/;"	m
X86AMode	hdefs.h	/^   X86AMode;$/;"	t
X86AModeTag	hdefs.h	/^   X86AModeTag;$/;"	t
X86AMode_IR	hdefs.c	/^X86AMode* X86AMode_IR ( UInt imm32, HReg reg ) {$/;"	f
X86AMode_IRRS	hdefs.c	/^X86AMode* X86AMode_IRRS ( UInt imm32, HReg base, HReg indEx, Int shift ) {$/;"	f
X86AluOp	hdefs.h	/^   X86AluOp;$/;"	t
X86CondCode	hdefs.h	/^   X86CondCode;$/;"	t
X86FpOp	hdefs.h	/^   X86FpOp;$/;"	t
X86Instr	hdefs.h	/^   X86Instr;$/;"	t
X86InstrTag	hdefs.h	/^   X86InstrTag;$/;"	t
X86Instr_Alu32M	hdefs.c	/^X86Instr* X86Instr_Alu32M ( X86AluOp op, X86RI* src, X86AMode* dst ) {$/;"	f
X86Instr_Alu32R	hdefs.c	/^X86Instr* X86Instr_Alu32R ( X86AluOp op, X86RMI* src, HReg dst ) {$/;"	f
X86Instr_Bsfr32	hdefs.c	/^X86Instr* X86Instr_Bsfr32 ( Bool isFwds, HReg src, HReg dst ) {$/;"	f
X86Instr_CMov32	hdefs.c	/^X86Instr* X86Instr_CMov32  ( X86CondCode cond, X86RM* src, HReg dst ) {$/;"	f
X86Instr_Call	hdefs.c	/^X86Instr* X86Instr_Call ( X86CondCode cond, Addr32 target, Int regparms ) {$/;"	f
X86Instr_Div	hdefs.c	/^X86Instr* X86Instr_Div ( Bool syned, X86RM* src ) {$/;"	f
X86Instr_Fp64to32	hdefs.c	/^X86Instr* X86Instr_Fp64to32 ( HReg src, HReg dst ) {$/;"	f
X86Instr_FpBinary	hdefs.c	/^X86Instr* X86Instr_FpBinary ( X86FpOp op, HReg srcL, HReg srcR, HReg dst ) {$/;"	f
X86Instr_FpCMov	hdefs.c	/^X86Instr* X86Instr_FpCMov ( X86CondCode cond, HReg src, HReg dst ) {$/;"	f
X86Instr_FpCmp	hdefs.c	/^X86Instr* X86Instr_FpCmp ( HReg srcL, HReg srcR, HReg dst ) {$/;"	f
X86Instr_FpLdCW	hdefs.c	/^X86Instr* X86Instr_FpLdCW ( X86AMode* addr ) {$/;"	f
X86Instr_FpLdSt	hdefs.c	/^X86Instr* X86Instr_FpLdSt ( Bool isLoad, UChar sz, HReg reg, X86AMode* addr ) {$/;"	f
X86Instr_FpLdStI	hdefs.c	/^X86Instr* X86Instr_FpLdStI ( Bool isLoad, UChar sz,  $/;"	f
X86Instr_FpStSW_AX	hdefs.c	/^X86Instr* X86Instr_FpStSW_AX ( void ) {$/;"	f
X86Instr_FpUnary	hdefs.c	/^X86Instr* X86Instr_FpUnary ( X86FpOp op, HReg src, HReg dst ) {$/;"	f
X86Instr_Goto	hdefs.c	/^X86Instr* X86Instr_Goto ( IRJumpKind jk, X86CondCode cond, X86RI* dst ) {$/;"	f
X86Instr_Lea32	hdefs.c	/^X86Instr* X86Instr_Lea32 ( X86AMode* am, HReg dst ) {$/;"	f
X86Instr_LoadEX	hdefs.c	/^X86Instr* X86Instr_LoadEX ( UChar szSmall, Bool syned,$/;"	f
X86Instr_MFence	hdefs.c	/^X86Instr* X86Instr_MFence ( UInt hwcaps )$/;"	f
X86Instr_MulL	hdefs.c	/^X86Instr* X86Instr_MulL ( Bool syned, X86RM* src ) {$/;"	f
X86Instr_Push	hdefs.c	/^X86Instr* X86Instr_Push( X86RMI* src ) {$/;"	f
X86Instr_Set32	hdefs.c	/^X86Instr* X86Instr_Set32 ( X86CondCode cond, HReg dst ) {$/;"	f
X86Instr_Sh32	hdefs.c	/^X86Instr* X86Instr_Sh32 ( X86ShiftOp op, UInt src, HReg dst ) {$/;"	f
X86Instr_Sh3232	hdefs.c	/^X86Instr* X86Instr_Sh3232  ( X86ShiftOp op, UInt amt, HReg src, HReg dst ) {$/;"	f
X86Instr_Sse32FLo	hdefs.c	/^X86Instr* X86Instr_Sse32FLo ( X86SseOp op, HReg src, HReg dst ) {$/;"	f
X86Instr_Sse32Fx4	hdefs.c	/^X86Instr* X86Instr_Sse32Fx4 ( X86SseOp op, HReg src, HReg dst ) {$/;"	f
X86Instr_Sse64FLo	hdefs.c	/^X86Instr* X86Instr_Sse64FLo ( X86SseOp op, HReg src, HReg dst ) {$/;"	f
X86Instr_Sse64Fx2	hdefs.c	/^X86Instr* X86Instr_Sse64Fx2 ( X86SseOp op, HReg src, HReg dst ) {$/;"	f
X86Instr_SseCMov	hdefs.c	/^X86Instr* X86Instr_SseCMov ( X86CondCode cond, HReg src, HReg dst ) {$/;"	f
X86Instr_SseConst	hdefs.c	/^X86Instr* X86Instr_SseConst ( UShort con, HReg dst ) {$/;"	f
X86Instr_SseLdSt	hdefs.c	/^X86Instr* X86Instr_SseLdSt ( Bool isLoad, HReg reg, X86AMode* addr ) {$/;"	f
X86Instr_SseLdzLO	hdefs.c	/^X86Instr* X86Instr_SseLdzLO  ( Int sz, HReg reg, X86AMode* addr )$/;"	f
X86Instr_SseReRg	hdefs.c	/^X86Instr* X86Instr_SseReRg ( X86SseOp op, HReg re, HReg rg ) {$/;"	f
X86Instr_SseShuf	hdefs.c	/^X86Instr* X86Instr_SseShuf ( Int order, HReg src, HReg dst ) {$/;"	f
X86Instr_Store	hdefs.c	/^X86Instr* X86Instr_Store ( UChar sz, HReg src, X86AMode* dst ) {$/;"	f
X86Instr_Test32	hdefs.c	/^X86Instr* X86Instr_Test32 ( UInt imm32, X86RM* dst ) {$/;"	f
X86Instr_Unary32	hdefs.c	/^X86Instr* X86Instr_Unary32 ( X86UnaryOp op, HReg dst ) {$/;"	f
X86RI	hdefs.h	/^   X86RI;$/;"	t
X86RITag	hdefs.h	/^   X86RITag;$/;"	t
X86RI_Imm	hdefs.c	/^X86RI* X86RI_Imm ( UInt imm32 ) {$/;"	f
X86RI_Reg	hdefs.c	/^X86RI* X86RI_Reg ( HReg reg ) {$/;"	f
X86RM	hdefs.h	/^   X86RM;$/;"	t
X86RMI	hdefs.h	/^   X86RMI;$/;"	t
X86RMITag	hdefs.h	/^   X86RMITag;$/;"	t
X86RMI_Imm	hdefs.c	/^X86RMI* X86RMI_Imm ( UInt imm32 ) {$/;"	f
X86RMI_Mem	hdefs.c	/^X86RMI* X86RMI_Mem ( X86AMode* am ) {$/;"	f
X86RMI_Reg	hdefs.c	/^X86RMI* X86RMI_Reg ( HReg reg ) {$/;"	f
X86RMTag	hdefs.h	/^   X86RMTag;$/;"	t
X86RM_Mem	hdefs.c	/^X86RM* X86RM_Mem ( X86AMode* am ) {$/;"	f
X86RM_Reg	hdefs.c	/^X86RM* X86RM_Reg ( HReg reg ) {$/;"	f
X86ShiftOp	hdefs.h	/^   X86ShiftOp;$/;"	t
X86SseOp	hdefs.h	/^   X86SseOp;$/;"	t
X86UnaryOp	hdefs.h	/^   X86UnaryOp;$/;"	t
XX	hdefs.c	2906;"	d	file:
XX	hdefs.c	2966;"	d	file:
Xalu_ADC	hdefs.h	/^      Xalu_ADD, Xalu_SUB, Xalu_ADC, Xalu_SBB, $/;"	e
Xalu_ADD	hdefs.h	/^      Xalu_ADD, Xalu_SUB, Xalu_ADC, Xalu_SBB, $/;"	e
Xalu_AND	hdefs.h	/^      Xalu_AND, Xalu_OR, Xalu_XOR,$/;"	e
Xalu_CMP	hdefs.h	/^      Xalu_CMP,$/;"	e
Xalu_INVALID	hdefs.h	/^      Xalu_INVALID,$/;"	e
Xalu_MOV	hdefs.h	/^      Xalu_MOV,$/;"	e
Xalu_MUL	hdefs.h	/^      Xalu_MUL$/;"	e
Xalu_OR	hdefs.h	/^      Xalu_AND, Xalu_OR, Xalu_XOR,$/;"	e
Xalu_SBB	hdefs.h	/^      Xalu_ADD, Xalu_SUB, Xalu_ADC, Xalu_SBB, $/;"	e
Xalu_SUB	hdefs.h	/^      Xalu_ADD, Xalu_SUB, Xalu_ADC, Xalu_SBB, $/;"	e
Xalu_XOR	hdefs.h	/^      Xalu_AND, Xalu_OR, Xalu_XOR,$/;"	e
Xam	hdefs.h	/^      } Xam;$/;"	m
Xam_IR	hdefs.h	/^     Xam_IR,        \/* Immediate + Reg *\/$/;"	e
Xam_IRRS	hdefs.h	/^     Xam_IRRS       \/* Immediate + Reg1 + (Reg2 << Shift) *\/$/;"	e
Xcc_ALWAYS	hdefs.h	/^      Xcc_ALWAYS = 16  \/* the usual hack     *\/$/;"	e
Xcc_B	hdefs.h	/^      Xcc_B      = 2,  \/* below              *\/$/;"	e
Xcc_BE	hdefs.h	/^      Xcc_BE     = 6,  \/* below or equal     *\/$/;"	e
Xcc_L	hdefs.h	/^      Xcc_L      = 12, \/* jump less          *\/$/;"	e
Xcc_LE	hdefs.h	/^      Xcc_LE     = 14, \/* less or equal      *\/$/;"	e
Xcc_NB	hdefs.h	/^      Xcc_NB     = 3,  \/* not below          *\/$/;"	e
Xcc_NBE	hdefs.h	/^      Xcc_NBE    = 7,  \/* not below or equal *\/$/;"	e
Xcc_NL	hdefs.h	/^      Xcc_NL     = 13, \/* not less           *\/$/;"	e
Xcc_NLE	hdefs.h	/^      Xcc_NLE    = 15, \/* not less or equal  *\/$/;"	e
Xcc_NO	hdefs.h	/^      Xcc_NO     = 1,  \/* no overflow        *\/$/;"	e
Xcc_NP	hdefs.h	/^      Xcc_NP     = 11, \/* not parity even    *\/$/;"	e
Xcc_NS	hdefs.h	/^      Xcc_NS     = 9,  \/* not negative       *\/$/;"	e
Xcc_NZ	hdefs.h	/^      Xcc_NZ     = 5,  \/* not zero           *\/$/;"	e
Xcc_O	hdefs.h	/^      Xcc_O      = 0,  \/* overflow           *\/$/;"	e
Xcc_P	hdefs.h	/^      Xcc_P      = 10, \/* parity even        *\/$/;"	e
Xcc_S	hdefs.h	/^      Xcc_S      = 8,  \/* negative           *\/$/;"	e
Xcc_Z	hdefs.h	/^      Xcc_Z      = 4,  \/* zero               *\/$/;"	e
Xfp_2XM1	hdefs.h	/^      Xfp_ROUND, Xfp_2XM1$/;"	e
Xfp_ABS	hdefs.h	/^      Xfp_SQRT, Xfp_ABS, Xfp_NEG, Xfp_MOV, Xfp_SIN, Xfp_COS, Xfp_TAN,$/;"	e
Xfp_ADD	hdefs.h	/^      Xfp_ADD, Xfp_SUB, Xfp_MUL, Xfp_DIV, $/;"	e
Xfp_ATAN	hdefs.h	/^      Xfp_SCALE, Xfp_ATAN, Xfp_YL2X, Xfp_YL2XP1, Xfp_PREM, Xfp_PREM1,$/;"	e
Xfp_COS	hdefs.h	/^      Xfp_SQRT, Xfp_ABS, Xfp_NEG, Xfp_MOV, Xfp_SIN, Xfp_COS, Xfp_TAN,$/;"	e
Xfp_DIV	hdefs.h	/^      Xfp_ADD, Xfp_SUB, Xfp_MUL, Xfp_DIV, $/;"	e
Xfp_INVALID	hdefs.h	/^      Xfp_INVALID,$/;"	e
Xfp_MOV	hdefs.h	/^      Xfp_SQRT, Xfp_ABS, Xfp_NEG, Xfp_MOV, Xfp_SIN, Xfp_COS, Xfp_TAN,$/;"	e
Xfp_MUL	hdefs.h	/^      Xfp_ADD, Xfp_SUB, Xfp_MUL, Xfp_DIV, $/;"	e
Xfp_NEG	hdefs.h	/^      Xfp_SQRT, Xfp_ABS, Xfp_NEG, Xfp_MOV, Xfp_SIN, Xfp_COS, Xfp_TAN,$/;"	e
Xfp_PREM	hdefs.h	/^      Xfp_SCALE, Xfp_ATAN, Xfp_YL2X, Xfp_YL2XP1, Xfp_PREM, Xfp_PREM1,$/;"	e
Xfp_PREM1	hdefs.h	/^      Xfp_SCALE, Xfp_ATAN, Xfp_YL2X, Xfp_YL2XP1, Xfp_PREM, Xfp_PREM1,$/;"	e
Xfp_ROUND	hdefs.h	/^      Xfp_ROUND, Xfp_2XM1$/;"	e
Xfp_SCALE	hdefs.h	/^      Xfp_SCALE, Xfp_ATAN, Xfp_YL2X, Xfp_YL2XP1, Xfp_PREM, Xfp_PREM1,$/;"	e
Xfp_SIN	hdefs.h	/^      Xfp_SQRT, Xfp_ABS, Xfp_NEG, Xfp_MOV, Xfp_SIN, Xfp_COS, Xfp_TAN,$/;"	e
Xfp_SQRT	hdefs.h	/^      Xfp_SQRT, Xfp_ABS, Xfp_NEG, Xfp_MOV, Xfp_SIN, Xfp_COS, Xfp_TAN,$/;"	e
Xfp_SUB	hdefs.h	/^      Xfp_ADD, Xfp_SUB, Xfp_MUL, Xfp_DIV, $/;"	e
Xfp_TAN	hdefs.h	/^      Xfp_SQRT, Xfp_ABS, Xfp_NEG, Xfp_MOV, Xfp_SIN, Xfp_COS, Xfp_TAN,$/;"	e
Xfp_YL2X	hdefs.h	/^      Xfp_SCALE, Xfp_ATAN, Xfp_YL2X, Xfp_YL2XP1, Xfp_PREM, Xfp_PREM1,$/;"	e
Xfp_YL2XP1	hdefs.h	/^      Xfp_SCALE, Xfp_ATAN, Xfp_YL2X, Xfp_YL2XP1, Xfp_PREM, Xfp_PREM1,$/;"	e
Xin	hdefs.h	/^      } Xin;$/;"	m
Xin_Alu32M	hdefs.h	/^      Xin_Alu32M,    \/* 32-bit mov\/arith\/logical, dst=MEM *\/$/;"	e
Xin_Alu32R	hdefs.h	/^      Xin_Alu32R,    \/* 32-bit mov\/arith\/logical, dst=REG *\/$/;"	e
Xin_Bsfr32	hdefs.h	/^      Xin_Bsfr32,    \/* 32-bit bsf\/bsr *\/$/;"	e
Xin_CMov32	hdefs.h	/^      Xin_CMov32,    \/* conditional move *\/$/;"	e
Xin_Call	hdefs.h	/^      Xin_Call,      \/* call to address in register *\/$/;"	e
Xin_Div	hdefs.h	/^      Xin_Div,       \/* 64\/32 -> (32,32) div and mod *\/$/;"	e
Xin_Fp64to32	hdefs.h	/^      Xin_Fp64to32,  \/* FP round IEEE754 double to IEEE754 single *\/$/;"	e
Xin_FpBinary	hdefs.h	/^      Xin_FpBinary,  \/* FP fake binary op *\/$/;"	e
Xin_FpCMov	hdefs.h	/^      Xin_FpCMov,    \/* FP fake floating point conditional move *\/$/;"	e
Xin_FpCmp	hdefs.h	/^      Xin_FpCmp,     \/* FP compare, generating a C320 value into int reg *\/$/;"	e
Xin_FpLdCW	hdefs.h	/^      Xin_FpLdCW,    \/* fldcw *\/$/;"	e
Xin_FpLdSt	hdefs.h	/^      Xin_FpLdSt,    \/* FP fake load\/store *\/$/;"	e
Xin_FpLdStI	hdefs.h	/^      Xin_FpLdStI,   \/* FP fake load\/store, converting to\/from Int *\/$/;"	e
Xin_FpStSW_AX	hdefs.h	/^      Xin_FpStSW_AX, \/* fstsw %ax *\/$/;"	e
Xin_FpUnary	hdefs.h	/^      Xin_FpUnary,   \/* FP fake unary op *\/$/;"	e
Xin_Goto	hdefs.h	/^      Xin_Goto,      \/* conditional\/unconditional jmp to dst *\/$/;"	e
Xin_Lea32	hdefs.h	/^      Xin_Lea32,     \/* 32-bit compute EA into a reg *\/$/;"	e
Xin_LoadEX	hdefs.h	/^      Xin_LoadEX,    \/* mov{s,z}{b,w}l from mem to reg *\/$/;"	e
Xin_MFence	hdefs.h	/^      Xin_MFence,    \/* mem fence (not just sse2, but sse0 and 1 too) *\/$/;"	e
Xin_MulL	hdefs.h	/^      Xin_MulL,      \/* 32 x 32 -> 64 multiply *\/$/;"	e
Xin_Push	hdefs.h	/^      Xin_Push,      \/* push (32-bit?) value on stack *\/$/;"	e
Xin_Set32	hdefs.h	/^      Xin_Set32,     \/* convert condition code to 32-bit value *\/$/;"	e
Xin_Sh32	hdefs.h	/^      Xin_Sh32,      \/* 32-bit shift\/rotate, dst=REG *\/$/;"	e
Xin_Sh3232	hdefs.h	/^      Xin_Sh3232,    \/* shldl or shrdl *\/$/;"	e
Xin_Sse32FLo	hdefs.h	/^      Xin_Sse32FLo,  \/* SSE binary, 32F in lowest lane only *\/$/;"	e
Xin_Sse32Fx4	hdefs.h	/^      Xin_Sse32Fx4,  \/* SSE binary, 32Fx4 *\/$/;"	e
Xin_Sse64FLo	hdefs.h	/^      Xin_Sse64FLo,  \/* SSE binary, 64F in lowest lane only *\/$/;"	e
Xin_Sse64Fx2	hdefs.h	/^      Xin_Sse64Fx2,  \/* SSE binary, 64Fx2 *\/$/;"	e
Xin_SseCMov	hdefs.h	/^      Xin_SseCMov,   \/* SSE conditional move *\/$/;"	e
Xin_SseConst	hdefs.h	/^      Xin_SseConst,  \/* Generate restricted SSE literal *\/$/;"	e
Xin_SseLdSt	hdefs.h	/^      Xin_SseLdSt,   \/* SSE load\/store, no alignment constraints *\/$/;"	e
Xin_SseLdzLO	hdefs.h	/^      Xin_SseLdzLO,  \/* SSE load low 32\/64 bits, zero remainder of reg *\/$/;"	e
Xin_SseReRg	hdefs.h	/^      Xin_SseReRg,   \/* SSE binary general reg-reg, Re, Rg *\/$/;"	e
Xin_SseShuf	hdefs.h	/^      Xin_SseShuf    \/* SSE2 shuffle (pshufd) *\/$/;"	e
Xin_Store	hdefs.h	/^      Xin_Store,     \/* store 16\/8 bit value in memory *\/$/;"	e
Xin_Test32	hdefs.h	/^      Xin_Test32,    \/* 32-bit test of REG or MEM against imm32 (AND, set$/;"	e
Xin_Unary32	hdefs.h	/^      Xin_Unary32,   \/* 32-bit not and neg *\/$/;"	e
Xri	hdefs.h	/^      Xri;$/;"	m
Xri_Imm	hdefs.h	/^      Xri_Imm,$/;"	e
Xri_Reg	hdefs.h	/^      Xri_Reg$/;"	e
Xrm	hdefs.h	/^      Xrm;$/;"	m
Xrm_Mem	hdefs.h	/^      Xrm_Mem$/;"	e
Xrm_Reg	hdefs.h	/^      Xrm_Reg,$/;"	e
Xrmi	hdefs.h	/^      Xrmi;$/;"	m
Xrmi_Imm	hdefs.h	/^      Xrmi_Imm,$/;"	e
Xrmi_Mem	hdefs.h	/^      Xrmi_Mem$/;"	e
Xrmi_Reg	hdefs.h	/^      Xrmi_Reg,$/;"	e
Xsh_INVALID	hdefs.h	/^      Xsh_INVALID,$/;"	e
Xsh_SAR	hdefs.h	/^      Xsh_SHL, Xsh_SHR, Xsh_SAR$/;"	e
Xsh_SHL	hdefs.h	/^      Xsh_SHL, Xsh_SHR, Xsh_SAR$/;"	e
Xsh_SHR	hdefs.h	/^      Xsh_SHL, Xsh_SHR, Xsh_SAR$/;"	e
Xsse_ADD16	hdefs.h	/^      Xsse_ADD8,   Xsse_ADD16,   Xsse_ADD32,   Xsse_ADD64,$/;"	e
Xsse_ADD32	hdefs.h	/^      Xsse_ADD8,   Xsse_ADD16,   Xsse_ADD32,   Xsse_ADD64,$/;"	e
Xsse_ADD64	hdefs.h	/^      Xsse_ADD8,   Xsse_ADD16,   Xsse_ADD32,   Xsse_ADD64,$/;"	e
Xsse_ADD8	hdefs.h	/^      Xsse_ADD8,   Xsse_ADD16,   Xsse_ADD32,   Xsse_ADD64,$/;"	e
Xsse_ADDF	hdefs.h	/^      Xsse_ADDF, Xsse_SUBF, Xsse_MULF, Xsse_DIVF,$/;"	e
Xsse_AND	hdefs.h	/^      Xsse_AND, Xsse_OR, Xsse_XOR, Xsse_ANDN,$/;"	e
Xsse_ANDN	hdefs.h	/^      Xsse_AND, Xsse_OR, Xsse_XOR, Xsse_ANDN,$/;"	e
Xsse_AVG16U	hdefs.h	/^      Xsse_AVG8U, Xsse_AVG16U,$/;"	e
Xsse_AVG8U	hdefs.h	/^      Xsse_AVG8U, Xsse_AVG16U,$/;"	e
Xsse_CMPEQ16	hdefs.h	/^      Xsse_CMPEQ8,  Xsse_CMPEQ16,  Xsse_CMPEQ32,$/;"	e
Xsse_CMPEQ32	hdefs.h	/^      Xsse_CMPEQ8,  Xsse_CMPEQ16,  Xsse_CMPEQ32,$/;"	e
Xsse_CMPEQ8	hdefs.h	/^      Xsse_CMPEQ8,  Xsse_CMPEQ16,  Xsse_CMPEQ32,$/;"	e
Xsse_CMPEQF	hdefs.h	/^      Xsse_CMPEQF, Xsse_CMPLTF, Xsse_CMPLEF, Xsse_CMPUNF,$/;"	e
Xsse_CMPGT16S	hdefs.h	/^      Xsse_CMPGT8S, Xsse_CMPGT16S, Xsse_CMPGT32S,$/;"	e
Xsse_CMPGT32S	hdefs.h	/^      Xsse_CMPGT8S, Xsse_CMPGT16S, Xsse_CMPGT32S,$/;"	e
Xsse_CMPGT8S	hdefs.h	/^      Xsse_CMPGT8S, Xsse_CMPGT16S, Xsse_CMPGT32S,$/;"	e
Xsse_CMPLEF	hdefs.h	/^      Xsse_CMPEQF, Xsse_CMPLTF, Xsse_CMPLEF, Xsse_CMPUNF,$/;"	e
Xsse_CMPLTF	hdefs.h	/^      Xsse_CMPEQF, Xsse_CMPLTF, Xsse_CMPLEF, Xsse_CMPUNF,$/;"	e
Xsse_CMPUNF	hdefs.h	/^      Xsse_CMPEQF, Xsse_CMPLTF, Xsse_CMPLEF, Xsse_CMPUNF,$/;"	e
Xsse_DIVF	hdefs.h	/^      Xsse_ADDF, Xsse_SUBF, Xsse_MULF, Xsse_DIVF,$/;"	e
Xsse_INVALID	hdefs.h	/^      Xsse_INVALID,$/;"	e
Xsse_MAX16S	hdefs.h	/^      Xsse_MAX16S,$/;"	e
Xsse_MAX8U	hdefs.h	/^      Xsse_MAX8U,$/;"	e
Xsse_MAXF	hdefs.h	/^      Xsse_MAXF, Xsse_MINF,$/;"	e
Xsse_MIN16S	hdefs.h	/^      Xsse_MIN16S,$/;"	e
Xsse_MIN8U	hdefs.h	/^      Xsse_MIN8U,$/;"	e
Xsse_MINF	hdefs.h	/^      Xsse_MAXF, Xsse_MINF,$/;"	e
Xsse_MOV	hdefs.h	/^      Xsse_MOV,$/;"	e
Xsse_MUL16	hdefs.h	/^      Xsse_MUL16,$/;"	e
Xsse_MULF	hdefs.h	/^      Xsse_ADDF, Xsse_SUBF, Xsse_MULF, Xsse_DIVF,$/;"	e
Xsse_MULHI16S	hdefs.h	/^      Xsse_MULHI16S,$/;"	e
Xsse_MULHI16U	hdefs.h	/^      Xsse_MULHI16U,$/;"	e
Xsse_OR	hdefs.h	/^      Xsse_AND, Xsse_OR, Xsse_XOR, Xsse_ANDN,$/;"	e
Xsse_PACKSSD	hdefs.h	/^      Xsse_PACKSSD, Xsse_PACKSSW, Xsse_PACKUSW,$/;"	e
Xsse_PACKSSW	hdefs.h	/^      Xsse_PACKSSD, Xsse_PACKSSW, Xsse_PACKUSW,$/;"	e
Xsse_PACKUSW	hdefs.h	/^      Xsse_PACKSSD, Xsse_PACKSSW, Xsse_PACKUSW,$/;"	e
Xsse_QADD16S	hdefs.h	/^      Xsse_QADD8S, Xsse_QADD16S,$/;"	e
Xsse_QADD16U	hdefs.h	/^      Xsse_QADD8U, Xsse_QADD16U,$/;"	e
Xsse_QADD8S	hdefs.h	/^      Xsse_QADD8S, Xsse_QADD16S,$/;"	e
Xsse_QADD8U	hdefs.h	/^      Xsse_QADD8U, Xsse_QADD16U,$/;"	e
Xsse_QSUB16S	hdefs.h	/^      Xsse_QSUB8S, Xsse_QSUB16S,$/;"	e
Xsse_QSUB16U	hdefs.h	/^      Xsse_QSUB8U, Xsse_QSUB16U,$/;"	e
Xsse_QSUB8S	hdefs.h	/^      Xsse_QSUB8S, Xsse_QSUB16S,$/;"	e
Xsse_QSUB8U	hdefs.h	/^      Xsse_QSUB8U, Xsse_QSUB16U,$/;"	e
Xsse_RCPF	hdefs.h	/^      Xsse_RCPF, Xsse_RSQRTF, Xsse_SQRTF, $/;"	e
Xsse_RSQRTF	hdefs.h	/^      Xsse_RCPF, Xsse_RSQRTF, Xsse_SQRTF, $/;"	e
Xsse_SAR16	hdefs.h	/^      Xsse_SAR16, Xsse_SAR32, $/;"	e
Xsse_SAR32	hdefs.h	/^      Xsse_SAR16, Xsse_SAR32, $/;"	e
Xsse_SHL16	hdefs.h	/^      Xsse_SHL16, Xsse_SHL32, Xsse_SHL64,$/;"	e
Xsse_SHL32	hdefs.h	/^      Xsse_SHL16, Xsse_SHL32, Xsse_SHL64,$/;"	e
Xsse_SHL64	hdefs.h	/^      Xsse_SHL16, Xsse_SHL32, Xsse_SHL64,$/;"	e
Xsse_SHR16	hdefs.h	/^      Xsse_SHR16, Xsse_SHR32, Xsse_SHR64,$/;"	e
Xsse_SHR32	hdefs.h	/^      Xsse_SHR16, Xsse_SHR32, Xsse_SHR64,$/;"	e
Xsse_SHR64	hdefs.h	/^      Xsse_SHR16, Xsse_SHR32, Xsse_SHR64,$/;"	e
Xsse_SQRTF	hdefs.h	/^      Xsse_RCPF, Xsse_RSQRTF, Xsse_SQRTF, $/;"	e
Xsse_SUB16	hdefs.h	/^      Xsse_SUB8,   Xsse_SUB16,   Xsse_SUB32,   Xsse_SUB64,$/;"	e
Xsse_SUB32	hdefs.h	/^      Xsse_SUB8,   Xsse_SUB16,   Xsse_SUB32,   Xsse_SUB64,$/;"	e
Xsse_SUB64	hdefs.h	/^      Xsse_SUB8,   Xsse_SUB16,   Xsse_SUB32,   Xsse_SUB64,$/;"	e
Xsse_SUB8	hdefs.h	/^      Xsse_SUB8,   Xsse_SUB16,   Xsse_SUB32,   Xsse_SUB64,$/;"	e
Xsse_SUBF	hdefs.h	/^      Xsse_ADDF, Xsse_SUBF, Xsse_MULF, Xsse_DIVF,$/;"	e
Xsse_UNPCKHB	hdefs.h	/^      Xsse_UNPCKHB, Xsse_UNPCKHW, Xsse_UNPCKHD, Xsse_UNPCKHQ,$/;"	e
Xsse_UNPCKHD	hdefs.h	/^      Xsse_UNPCKHB, Xsse_UNPCKHW, Xsse_UNPCKHD, Xsse_UNPCKHQ,$/;"	e
Xsse_UNPCKHQ	hdefs.h	/^      Xsse_UNPCKHB, Xsse_UNPCKHW, Xsse_UNPCKHD, Xsse_UNPCKHQ,$/;"	e
Xsse_UNPCKHW	hdefs.h	/^      Xsse_UNPCKHB, Xsse_UNPCKHW, Xsse_UNPCKHD, Xsse_UNPCKHQ,$/;"	e
Xsse_UNPCKLB	hdefs.h	/^      Xsse_UNPCKLB, Xsse_UNPCKLW, Xsse_UNPCKLD, Xsse_UNPCKLQ$/;"	e
Xsse_UNPCKLD	hdefs.h	/^      Xsse_UNPCKLB, Xsse_UNPCKLW, Xsse_UNPCKLD, Xsse_UNPCKLQ$/;"	e
Xsse_UNPCKLQ	hdefs.h	/^      Xsse_UNPCKLB, Xsse_UNPCKLW, Xsse_UNPCKLD, Xsse_UNPCKLQ$/;"	e
Xsse_UNPCKLW	hdefs.h	/^      Xsse_UNPCKLB, Xsse_UNPCKLW, Xsse_UNPCKLD, Xsse_UNPCKLQ$/;"	e
Xsse_XOR	hdefs.h	/^      Xsse_AND, Xsse_OR, Xsse_XOR, Xsse_ANDN,$/;"	e
Xun_NEG	hdefs.h	/^      Xun_NEG,$/;"	e
Xun_NOT	hdefs.h	/^      Xun_NOT$/;"	e
__LIBVEX_HOST_X86_HDEFS_H	hdefs.h	48;"	d
addInstr	isel.c	/^static void addInstr ( ISelEnv* env, X86Instr* instr )$/;"	f	file:
addRegUsage_X86AMode	hdefs.c	/^static void addRegUsage_X86AMode ( HRegUsage* u, X86AMode* am ) {$/;"	f	file:
addRegUsage_X86RI	hdefs.c	/^static void addRegUsage_X86RI ( HRegUsage* u, X86RI* op ) {$/;"	f	file:
addRegUsage_X86RM	hdefs.c	/^static void addRegUsage_X86RM ( HRegUsage* u, X86RM* op, HRegMode mode ) {$/;"	f	file:
addRegUsage_X86RMI	hdefs.c	/^static void addRegUsage_X86RMI ( HRegUsage* u, X86RMI* op ) {$/;"	f	file:
add_to_esp	isel.c	/^static void add_to_esp ( ISelEnv* env, Int n )$/;"	f	file:
addr	hdefs.h	/^            X86AMode* addr;$/;"	m
advance4	isel.c	/^static X86AMode* advance4 ( X86AMode* am )$/;"	f	file:
am	hdefs.h	/^            X86AMode* am;$/;"	m
amt	hdefs.h	/^            UInt       amt;   \/* shift amount, or 0 means %cl *\/$/;"	m
base	hdefs.h	/^            HReg base;$/;"	m
bind	isel.c	/^static IRExpr* bind ( Int binder )$/;"	f	file:
binop	isel.c	/^static IRExpr* binop ( IROp op, IRExpr* a1, IRExpr* a2 )$/;"	f	file:
callHelperAndClearArgs	isel.c	/^void callHelperAndClearArgs ( ISelEnv* env, X86CondCode cc, $/;"	f	file:
code	isel.c	/^      HInstrArray* code;$/;"	m	file:
con	hdefs.h	/^            UShort  con;$/;"	m
cond	hdefs.h	/^            X86CondCode cond;$/;"	m
directReload_X86	hdefs.c	/^X86Instr* directReload_X86( X86Instr* i, HReg vreg, Short spill_off )$/;"	f
doAMode_M	hdefs.c	/^static UChar* doAMode_M ( UChar* p, HReg greg, X86AMode* am ) $/;"	f	file:
doAMode_R	hdefs.c	/^static UChar* doAMode_R ( UChar* p, HReg greg, HReg ereg ) $/;"	f	file:
doHelperCall	isel.c	/^void doHelperCall ( ISelEnv* env, $/;"	f	file:
do_ffree_st7	hdefs.c	/^static UChar* do_ffree_st7 ( UChar* p )$/;"	f	file:
do_fld_st	hdefs.c	/^static UChar* do_fld_st ( UChar* p, Int i )$/;"	f	file:
do_fop1_st	hdefs.c	/^static UChar* do_fop1_st ( UChar* p, X86FpOp op )$/;"	f	file:
do_fop2_st	hdefs.c	/^static UChar* do_fop2_st ( UChar* p, X86FpOp op, Int i )$/;"	f	file:
do_fstp_st	hdefs.c	/^static UChar* do_fstp_st ( UChar* p, Int i )$/;"	f	file:
do_sse_Not128	isel.c	/^static HReg do_sse_Not128 ( ISelEnv* env, HReg src )$/;"	f	file:
dopyX86AMode	hdefs.c	/^X86AMode* dopyX86AMode ( X86AMode* am ) {$/;"	f
dst	hdefs.h	/^            HReg        dst;$/;"	m
dst	hdefs.h	/^            HReg       dst;$/;"	m
dst	hdefs.h	/^            HReg      dst;$/;"	m
dst	hdefs.h	/^            HReg     dst;$/;"	m
dst	hdefs.h	/^            HReg    dst;$/;"	m
dst	hdefs.h	/^            HReg   dst;$/;"	m
dst	hdefs.h	/^            HReg  dst;$/;"	m
dst	hdefs.h	/^            HReg dst;$/;"	m
dst	hdefs.h	/^            X86AMode* dst;$/;"	m
dst	hdefs.h	/^            X86RI*      dst;$/;"	m
dst	hdefs.h	/^            X86RM* dst; \/* not written, only read *\/$/;"	m
emit32	hdefs.c	/^static UChar* emit32 ( UChar* p, UInt w32 )$/;"	f	file:
emit_X86Instr	hdefs.c	/^Int emit_X86Instr ( UChar* buf, Int nbuf, X86Instr* i, $/;"	f
fake	hdefs.c	1891;"	d	file:
fake	hdefs.c	1903;"	d	file:
fake	hdefs.c	1954;"	d	file:
fake	hdefs.c	3007;"	d	file:
fits8bits	hdefs.c	/^static Bool fits8bits ( UInt w32 )$/;"	f	file:
fregNo	hdefs.c	/^static UInt fregNo ( HReg r )$/;"	f	file:
genGuestArrayOffset	isel.c	/^X86AMode* genGuestArrayOffset ( ISelEnv* env, IRRegArray* descr, $/;"	f	file:
genReload_X86	hdefs.c	/^X86Instr* genReload_X86 ( HReg rreg, Int offsetB, Bool mode64 )$/;"	f
genSpill_X86	hdefs.c	/^X86Instr* genSpill_X86 ( HReg rreg, Int offsetB, Bool mode64 )$/;"	f
getAllocableRegs_X86	hdefs.c	/^void getAllocableRegs_X86 ( Int* nregs, HReg** arr )$/;"	f
getRegUsage_X86Instr	hdefs.c	/^void getRegUsage_X86Instr (HRegUsage* u, X86Instr* i, Bool mode64)$/;"	f
hregX86_EAX	hdefs.c	/^HReg hregX86_EAX ( void ) { return mkHReg(0, HRcInt32, False); }$/;"	f
hregX86_EBP	hdefs.c	/^HReg hregX86_EBP ( void ) { return mkHReg(5, HRcInt32, False); }$/;"	f
hregX86_EBX	hdefs.c	/^HReg hregX86_EBX ( void ) { return mkHReg(3, HRcInt32, False); }$/;"	f
hregX86_ECX	hdefs.c	/^HReg hregX86_ECX ( void ) { return mkHReg(1, HRcInt32, False); }$/;"	f
hregX86_EDI	hdefs.c	/^HReg hregX86_EDI ( void ) { return mkHReg(7, HRcInt32, False); }$/;"	f
hregX86_EDX	hdefs.c	/^HReg hregX86_EDX ( void ) { return mkHReg(2, HRcInt32, False); }$/;"	f
hregX86_ESI	hdefs.c	/^HReg hregX86_ESI ( void ) { return mkHReg(6, HRcInt32, False); }$/;"	f
hregX86_ESP	hdefs.c	/^HReg hregX86_ESP ( void ) { return mkHReg(4, HRcInt32, False); }$/;"	f
hregX86_FAKE0	hdefs.c	/^HReg hregX86_FAKE0 ( void ) { return mkHReg(0, HRcFlt64, False); }$/;"	f
hregX86_FAKE1	hdefs.c	/^HReg hregX86_FAKE1 ( void ) { return mkHReg(1, HRcFlt64, False); }$/;"	f
hregX86_FAKE2	hdefs.c	/^HReg hregX86_FAKE2 ( void ) { return mkHReg(2, HRcFlt64, False); }$/;"	f
hregX86_FAKE3	hdefs.c	/^HReg hregX86_FAKE3 ( void ) { return mkHReg(3, HRcFlt64, False); }$/;"	f
hregX86_FAKE4	hdefs.c	/^HReg hregX86_FAKE4 ( void ) { return mkHReg(4, HRcFlt64, False); }$/;"	f
hregX86_FAKE5	hdefs.c	/^HReg hregX86_FAKE5 ( void ) { return mkHReg(5, HRcFlt64, False); }$/;"	f
hregX86_XMM0	hdefs.c	/^HReg hregX86_XMM0 ( void ) { return mkHReg(0, HRcVec128, False); }$/;"	f
hregX86_XMM1	hdefs.c	/^HReg hregX86_XMM1 ( void ) { return mkHReg(1, HRcVec128, False); }$/;"	f
hregX86_XMM2	hdefs.c	/^HReg hregX86_XMM2 ( void ) { return mkHReg(2, HRcVec128, False); }$/;"	f
hregX86_XMM3	hdefs.c	/^HReg hregX86_XMM3 ( void ) { return mkHReg(3, HRcVec128, False); }$/;"	f
hregX86_XMM4	hdefs.c	/^HReg hregX86_XMM4 ( void ) { return mkHReg(4, HRcVec128, False); }$/;"	f
hregX86_XMM5	hdefs.c	/^HReg hregX86_XMM5 ( void ) { return mkHReg(5, HRcVec128, False); }$/;"	f
hregX86_XMM6	hdefs.c	/^HReg hregX86_XMM6 ( void ) { return mkHReg(6, HRcVec128, False); }$/;"	f
hregX86_XMM7	hdefs.c	/^HReg hregX86_XMM7 ( void ) { return mkHReg(7, HRcVec128, False); }$/;"	f
hwcaps	hdefs.h	/^            UInt hwcaps;$/;"	m
hwcaps	isel.c	/^      UInt         hwcaps;$/;"	m	file:
imm	hdefs.h	/^            UInt imm;$/;"	m
imm32	hdefs.h	/^            UInt   imm32;$/;"	m
imm32	hdefs.h	/^            UInt imm32;$/;"	m
index	hdefs.h	/^            HReg index;$/;"	m
iregNo	hdefs.c	/^static UChar iregNo ( HReg r )$/;"	f	file:
isFwds	hdefs.h	/^            Bool isFwds;$/;"	m
isLoad	hdefs.h	/^            Bool      isLoad;$/;"	m
isMove_X86Instr	hdefs.c	/^Bool isMove_X86Instr ( X86Instr* i, HReg* src, HReg* dst )$/;"	f
isZeroU32	isel.c	/^static Bool isZeroU32 ( IRExpr* e )$/;"	f	file:
isZeroU64	isel.c	/^static Bool isZeroU64 ( IRExpr* e )$/;"	f	file:
isZeroU8	isel.c	/^static Bool isZeroU8 ( IRExpr* e )$/;"	f	file:
iselCondCode	isel.c	/^static X86CondCode iselCondCode ( ISelEnv* env, IRExpr* e )$/;"	f	file:
iselCondCode_wrk	isel.c	/^static X86CondCode iselCondCode_wrk ( ISelEnv* env, IRExpr* e )$/;"	f	file:
iselDblExpr	isel.c	/^static HReg iselDblExpr ( ISelEnv* env, IRExpr* e )$/;"	f	file:
iselDblExpr_wrk	isel.c	/^static HReg iselDblExpr_wrk ( ISelEnv* env, IRExpr* e )$/;"	f	file:
iselFltExpr	isel.c	/^static HReg iselFltExpr ( ISelEnv* env, IRExpr* e )$/;"	f	file:
iselFltExpr_wrk	isel.c	/^static HReg iselFltExpr_wrk ( ISelEnv* env, IRExpr* e )$/;"	f	file:
iselInt64Expr	isel.c	/^static void iselInt64Expr ( HReg* rHi, HReg* rLo, ISelEnv* env, IRExpr* e )$/;"	f	file:
iselInt64Expr_wrk	isel.c	/^static void iselInt64Expr_wrk ( HReg* rHi, HReg* rLo, ISelEnv* env, IRExpr* e )$/;"	f	file:
iselIntExpr_AMode	isel.c	/^static X86AMode* iselIntExpr_AMode ( ISelEnv* env, IRExpr* e )$/;"	f	file:
iselIntExpr_AMode_wrk	isel.c	/^static X86AMode* iselIntExpr_AMode_wrk ( ISelEnv* env, IRExpr* e )$/;"	f	file:
iselIntExpr_R	isel.c	/^static HReg iselIntExpr_R ( ISelEnv* env, IRExpr* e )$/;"	f	file:
iselIntExpr_RI	isel.c	/^static X86RI* iselIntExpr_RI ( ISelEnv* env, IRExpr* e )$/;"	f	file:
iselIntExpr_RI_wrk	isel.c	/^static X86RI* iselIntExpr_RI_wrk ( ISelEnv* env, IRExpr* e )$/;"	f	file:
iselIntExpr_RM	isel.c	/^static X86RM* iselIntExpr_RM ( ISelEnv* env, IRExpr* e )$/;"	f	file:
iselIntExpr_RMI	isel.c	/^static X86RMI* iselIntExpr_RMI ( ISelEnv* env, IRExpr* e )$/;"	f	file:
iselIntExpr_RMI_wrk	isel.c	/^static X86RMI* iselIntExpr_RMI_wrk ( ISelEnv* env, IRExpr* e )$/;"	f	file:
iselIntExpr_RM_wrk	isel.c	/^static X86RM* iselIntExpr_RM_wrk ( ISelEnv* env, IRExpr* e )$/;"	f	file:
iselIntExpr_R_wrk	isel.c	/^static HReg iselIntExpr_R_wrk ( ISelEnv* env, IRExpr* e )$/;"	f	file:
iselNext	isel.c	/^static void iselNext ( ISelEnv* env, IRExpr* next, IRJumpKind jk )$/;"	f	file:
iselSB_X86	isel.c	/^HInstrArray* iselSB_X86 ( IRSB* bb, VexArch      arch_host,$/;"	f
iselStmt	isel.c	/^static void iselStmt ( ISelEnv* env, IRStmt* stmt )$/;"	f	file:
iselVecExpr	isel.c	/^static HReg iselVecExpr ( ISelEnv* env, IRExpr* e )$/;"	f	file:
iselVecExpr_wrk	isel.c	/^static HReg iselVecExpr_wrk ( ISelEnv* env, IRExpr* e )$/;"	f	file:
jk	hdefs.h	/^            IRJumpKind  jk;$/;"	m
lookupIRTemp	isel.c	/^static HReg lookupIRTemp ( ISelEnv* env, IRTemp tmp )$/;"	f	file:
lookupIRTemp64	isel.c	/^static void lookupIRTemp64 ( HReg* vrHI, HReg* vrLO, ISelEnv* env, IRTemp tmp )$/;"	f	file:
mapReg	hdefs.c	/^static void mapReg( HRegRemap* m, HReg* r )$/;"	f	file:
mapRegs_X86AMode	hdefs.c	/^static void mapRegs_X86AMode ( HRegRemap* m, X86AMode* am ) {$/;"	f	file:
mapRegs_X86Instr	hdefs.c	/^void mapRegs_X86Instr ( HRegRemap* m, X86Instr* i, Bool mode64 )$/;"	f
mapRegs_X86RI	hdefs.c	/^static void mapRegs_X86RI ( HRegRemap* m, X86RI* op ) {$/;"	f	file:
mapRegs_X86RM	hdefs.c	/^static void mapRegs_X86RM ( HRegRemap* m, X86RM* op )$/;"	f	file:
mapRegs_X86RMI	hdefs.c	/^static void mapRegs_X86RMI ( HRegRemap* m, X86RMI* op ) {$/;"	f	file:
mightRequireFixedRegs	isel.c	/^Bool mightRequireFixedRegs ( IRExpr* e )$/;"	f	file:
mkModRegRM	hdefs.c	/^static UChar mkModRegRM ( UChar mod, UChar reg, UChar regmem )$/;"	f	file:
mkSIB	hdefs.c	/^static UChar mkSIB ( Int shift, Int regindex, Int regbase )$/;"	f	file:
mk_iMOVsd_RR	isel.c	/^static X86Instr* mk_iMOVsd_RR ( HReg src, HReg dst )$/;"	f	file:
mk_vMOVsd_RR	isel.c	/^static X86Instr* mk_vMOVsd_RR ( HReg src, HReg dst )$/;"	f	file:
n_vregmap	isel.c	/^      Int          n_vregmap;$/;"	m	file:
newVRegF	isel.c	/^static HReg newVRegF ( ISelEnv* env )$/;"	f	file:
newVRegI	isel.c	/^static HReg newVRegI ( ISelEnv* env )$/;"	f	file:
newVRegV	isel.c	/^static HReg newVRegV ( ISelEnv* env )$/;"	f	file:
op	hdefs.h	/^            X86AluOp  op;$/;"	m
op	hdefs.h	/^            X86AluOp op;$/;"	m
op	hdefs.h	/^            X86FpOp op;$/;"	m
op	hdefs.h	/^            X86ShiftOp op;$/;"	m
op	hdefs.h	/^            X86SseOp op;$/;"	m
op	hdefs.h	/^            X86UnaryOp op;$/;"	m
order	hdefs.h	/^            Int    order; \/* 0 <= order <= 0xFF *\/$/;"	m
ppHRegX86	hdefs.c	/^void ppHRegX86 ( HReg reg ) $/;"	f
ppX86AMode	hdefs.c	/^void ppX86AMode ( X86AMode* am ) {$/;"	f
ppX86Instr	hdefs.c	/^void ppX86Instr ( X86Instr* i, Bool mode64 ) {$/;"	f
ppX86RI	hdefs.c	/^void ppX86RI ( X86RI* op ) {$/;"	f
ppX86RM	hdefs.c	/^void ppX86RM ( X86RM* op ) {$/;"	f
ppX86RMI	hdefs.c	/^void ppX86RMI ( X86RMI* op ) {$/;"	f
pushArg	isel.c	/^static Int pushArg ( ISelEnv* env, IRExpr* arg )$/;"	f	file:
push_word_from_tags	hdefs.c	/^static UChar* push_word_from_tags ( UChar* p, UShort tags )$/;"	f	file:
reg	hdefs.h	/^            HReg      reg;$/;"	m
reg	hdefs.h	/^            HReg reg;$/;"	m
regparms	hdefs.h	/^            Int         regparms; \/* 0 .. 3 *\/$/;"	m
roundToF64	isel.c	/^static void roundToF64 ( ISelEnv* env, HReg reg )$/;"	f	file:
sane_AMode	isel.c	/^static Bool sane_AMode ( X86AMode* am )$/;"	f	file:
set_FPU_rounding_default	isel.c	/^void set_FPU_rounding_default ( ISelEnv* env )$/;"	f	file:
set_FPU_rounding_mode	isel.c	/^void set_FPU_rounding_mode ( ISelEnv* env, IRExpr* mode )$/;"	f	file:
shift	hdefs.h	/^            Int  shift; \/* 0, 1, 2 or 3 only *\/$/;"	m
showX86AluOp	hdefs.c	/^HChar* showX86AluOp ( X86AluOp op ) {$/;"	f
showX86CondCode	hdefs.c	/^HChar* showX86CondCode ( X86CondCode cond )$/;"	f
showX86FpOp	hdefs.c	/^HChar* showX86FpOp ( X86FpOp op ) {$/;"	f
showX86ShiftOp	hdefs.c	/^HChar* showX86ShiftOp ( X86ShiftOp op ) {$/;"	f
showX86SseOp	hdefs.c	/^HChar* showX86SseOp ( X86SseOp op ) {$/;"	f
showX86UnaryOp	hdefs.c	/^HChar* showX86UnaryOp ( X86UnaryOp op ) {$/;"	f
src	hdefs.h	/^            HReg        src;$/;"	m
src	hdefs.h	/^            HReg       src;$/;"	m
src	hdefs.h	/^            HReg      src;$/;"	m
src	hdefs.h	/^            HReg     src;$/;"	m
src	hdefs.h	/^            HReg    src;$/;"	m
src	hdefs.h	/^            HReg   src;$/;"	m
src	hdefs.h	/^            HReg src;$/;"	m
src	hdefs.h	/^            UInt  src;  \/* shift amount, or 0 means %cl *\/$/;"	m
src	hdefs.h	/^            X86AMode* src;$/;"	m
src	hdefs.h	/^            X86RI*    src;$/;"	m
src	hdefs.h	/^            X86RM*      src;$/;"	m
src	hdefs.h	/^            X86RM* src;$/;"	m
src	hdefs.h	/^            X86RMI*  src;$/;"	m
src	hdefs.h	/^            X86RMI* src;$/;"	m
srcL	hdefs.h	/^            HReg    srcL;$/;"	m
srcR	hdefs.h	/^            HReg    srcR;$/;"	m
sub_from_esp	isel.c	/^static void sub_from_esp ( ISelEnv* env, Int n )$/;"	f	file:
syned	hdefs.h	/^            Bool      syned;$/;"	m
syned	hdefs.h	/^            Bool   syned;$/;"	m
sz	hdefs.h	/^            UChar     sz; \/* 4 or 8 only *\/$/;"	m
sz	hdefs.h	/^            UChar     sz; \/* only 1 or 2 *\/$/;"	m
sz	hdefs.h	/^            UChar     sz; \/* only 2, 4 or 8 *\/$/;"	m
sz	hdefs.h	/^            UChar     sz; \/* only 4 (IEEE single) or 8 (IEEE double) *\/$/;"	m
szSmall	hdefs.h	/^            UChar     szSmall;$/;"	m
tag	hdefs.h	/^      X86AModeTag tag;$/;"	m
tag	hdefs.h	/^      X86InstrTag tag;$/;"	m
tag	hdefs.h	/^      X86RITag tag;$/;"	m
tag	hdefs.h	/^      X86RMITag tag;$/;"	m
tag	hdefs.h	/^      X86RMTag tag;$/;"	m
target	hdefs.h	/^            Addr32      target;$/;"	m
type_env	isel.c	/^      IRTypeEnv*   type_env;$/;"	m	file:
unop	isel.c	/^static IRExpr* unop ( IROp op, IRExpr* a )$/;"	f	file:
vregNo	hdefs.c	/^static UInt vregNo ( HReg r )$/;"	f	file:
vreg_ctr	isel.c	/^      Int          vreg_ctr;$/;"	m	file:
vregmap	isel.c	/^      HReg*        vregmap;$/;"	m	file:
vregmapHI	isel.c	/^      HReg*        vregmapHI;$/;"	m	file:
