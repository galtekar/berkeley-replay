!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.5.4	//
ATmpInfo	iropt.c	/^   ATmpInfo;$/;"	t	file:
A_NENV	iropt.c	3493;"	d	file:
AvailExpr	iropt.c	/^   AvailExpr;$/;"	t	file:
BINARY	irdefs.c	1460;"	d	file:
BINARY	irdefs.c	1810;"	d	file:
Bct	iropt.c	/^         } Bct;$/;"	m	file:
Bct	iropt.c	/^      enum { Ut, Btt, Btc, Bct, Cf64i, Mttt, GetIt } tag;$/;"	e	file:
Btc	iropt.c	/^         } Btc;$/;"	m	file:
Btc	iropt.c	/^      enum { Ut, Btt, Btc, Bct, Cf64i, Mttt, GetIt } tag;$/;"	e	file:
Btt	iropt.c	/^         } Btt;$/;"	m	file:
Btt	iropt.c	/^      enum { Ut, Btt, Btc, Bct, Cf64i, Mttt, GetIt } tag;$/;"	e	file:
COMPARISON	irdefs.c	1469;"	d	file:
COMPARISON	irdefs.c	1812;"	d	file:
Cf64i	iropt.c	/^         } Cf64i;$/;"	m	file:
Cf64i	iropt.c	/^      enum { Ut, Btt, Btc, Bct, Cf64i, Mttt, GetIt } tag;$/;"	e	file:
DEBUG_IROPT	iropt.c	57;"	d	file:
DECLARE_PATTERN	irmatch.h	60;"	d
DEFINE_PATTERN	irmatch.h	63;"	d
ExactAlias	iropt.c	/^   enum { ExactAlias, NoAlias, UnknownAlias }$/;"	e	file:
GSAliasing	iropt.c	/^   GSAliasing;$/;"	t	file:
GetIt	iropt.c	/^         } GetIt;$/;"	m	file:
GetIt	iropt.c	/^      enum { Ut, Btt, Btc, Bct, Cf64i, Mttt, GetIt } tag;$/;"	e	file:
HashHW	iropt.c	/^   HashHW;$/;"	t	file:
IRConst_F64	irdefs.c	/^IRConst* IRConst_F64 ( Double f64 )$/;"	f
IRConst_F64i	irdefs.c	/^IRConst* IRConst_F64i ( ULong f64i )$/;"	f
IRConst_U1	irdefs.c	/^IRConst* IRConst_U1 ( Bool bit )$/;"	f
IRConst_U16	irdefs.c	/^IRConst* IRConst_U16 ( UShort u16 )$/;"	f
IRConst_U32	irdefs.c	/^IRConst* IRConst_U32 ( UInt u32 )$/;"	f
IRConst_U64	irdefs.c	/^IRConst* IRConst_U64 ( ULong u64 )$/;"	f
IRConst_U8	irdefs.c	/^IRConst* IRConst_U8 ( UChar u8 )$/;"	f
IRConst_V128	irdefs.c	/^IRConst* IRConst_V128 ( UShort con )$/;"	f
IRExpr_Binder	irdefs.c	/^IRExpr* IRExpr_Binder ( Int binder ) {$/;"	f
IRExpr_Binop	irdefs.c	/^IRExpr* IRExpr_Binop ( IROp op, IRExpr* arg1, IRExpr* arg2 ) {$/;"	f
IRExpr_CCall	irdefs.c	/^IRExpr* IRExpr_CCall ( IRCallee* cee, IRType retty, IRExpr** args ) {$/;"	f
IRExpr_Const	irdefs.c	/^IRExpr* IRExpr_Const ( IRConst* con ) {$/;"	f
IRExpr_Get	irdefs.c	/^IRExpr* IRExpr_Get ( Int off, IRType ty ) {$/;"	f
IRExpr_GetI	irdefs.c	/^IRExpr* IRExpr_GetI ( IRRegArray* descr, IRExpr* ix, Int bias ) {$/;"	f
IRExpr_Load	irdefs.c	/^IRExpr* IRExpr_Load ( IREndness end, IRType ty, IRExpr* addr ) {$/;"	f
IRExpr_Mux0X	irdefs.c	/^IRExpr* IRExpr_Mux0X ( IRExpr* cond, IRExpr* expr0, IRExpr* exprX ) {$/;"	f
IRExpr_Qop	irdefs.c	/^IRExpr* IRExpr_Qop ( IROp op, IRExpr* arg1, IRExpr* arg2, $/;"	f
IRExpr_RdTmp	irdefs.c	/^IRExpr* IRExpr_RdTmp ( IRTemp tmp ) {$/;"	f
IRExpr_Triop	irdefs.c	/^IRExpr* IRExpr_Triop  ( IROp op, IRExpr* arg1, $/;"	f
IRExpr_Unop	irdefs.c	/^IRExpr* IRExpr_Unop ( IROp op, IRExpr* arg ) {$/;"	f
IRStmt_AbiHint	irdefs.c	/^IRStmt* IRStmt_AbiHint ( IRExpr* base, Int len ) {$/;"	f
IRStmt_Dirty	irdefs.c	/^IRStmt* IRStmt_Dirty ( IRDirty* d )$/;"	f
IRStmt_Exit	irdefs.c	/^IRStmt* IRStmt_Exit ( IRExpr* guard, IRJumpKind jk, IRConst* dst ) {$/;"	f
IRStmt_IMark	irdefs.c	/^IRStmt* IRStmt_IMark ( Addr64 addr, Int len ) {$/;"	f
IRStmt_MBE	irdefs.c	/^IRStmt* IRStmt_MBE ( IRMBusEvent event )$/;"	f
IRStmt_NoOp	irdefs.c	/^IRStmt* IRStmt_NoOp ( void )$/;"	f
IRStmt_Put	irdefs.c	/^IRStmt* IRStmt_Put ( Int off, IRExpr* data ) {$/;"	f
IRStmt_PutI	irdefs.c	/^IRStmt* IRStmt_PutI ( IRRegArray* descr, IRExpr* ix,$/;"	f
IRStmt_Store	irdefs.c	/^IRStmt* IRStmt_Store ( IREndness end, IRExpr* addr, IRExpr* data ) {$/;"	f
IRStmt_WrTmp	irdefs.c	/^IRStmt* IRStmt_WrTmp ( IRTemp tmp, IRExpr* data ) {$/;"	f
MatchInfo	irmatch.h	/^   MatchInfo;$/;"	t
Mttt	iropt.c	/^         } Mttt;$/;"	m	file:
Mttt	iropt.c	/^      enum { Ut, Btt, Btc, Bct, Cf64i, Mttt, GetIt } tag;$/;"	e	file:
N_IRMATCH_BINDERS	irmatch.h	78;"	d
NoAlias	iropt.c	/^   enum { ExactAlias, NoAlias, UnknownAlias }$/;"	e	file:
QUATERNARY	irdefs.c	1465;"	d	file:
TERNARY	irdefs.c	1462;"	d	file:
TERNARY	irdefs.c	1811;"	d	file:
UNARY	irdefs.c	1458;"	d	file:
UNARY	irdefs.c	1809;"	d	file:
UNARY_COMPARISON	irdefs.c	1471;"	d	file:
UNARY_COMPARISON	irdefs.c	1813;"	d	file:
UnknownAlias	iropt.c	/^   enum { ExactAlias, NoAlias, UnknownAlias }$/;"	e	file:
Ut	iropt.c	/^         } Ut;$/;"	m	file:
Ut	iropt.c	/^      enum { Ut, Btt, Btc, Bct, Cf64i, Mttt, GetIt } tag;$/;"	e	file:
__LIBVEX_IRMATCH_H	irmatch.h	50;"	d
__LIBVEX_IROPT_H	iropt.h	48;"	d
addStmtToIRSB	irdefs.c	/^void addStmtToIRSB ( IRSB* bb, IRStmt* st )$/;"	f
addToEnvFront	iropt.c	/^static void addToEnvFront ( ATmpInfo* env, IRTemp binder, IRExpr* bindee )$/;"	f	file:
addToHHW	iropt.c	/^static void addToHHW ( HashHW* h, HWord key, HWord val )$/;"	f	file:
addUses_Expr	iropt.c	/^static void addUses_Expr ( Bool* set, IRExpr* e )$/;"	f	file:
addUses_Stmt	iropt.c	/^static void addUses_Stmt ( Bool* set, IRStmt* st )$/;"	f	file:
addUses_Temp	iropt.c	/^static void addUses_Temp ( Bool* set, IRTemp tmp )$/;"	f	file:
ado_treebuild_BB	iropt.c	/^\/* notstatic *\/ void ado_treebuild_BB ( IRSB* bb )$/;"	f
aoccCount_Expr	iropt.c	/^static void aoccCount_Expr ( UShort* uses, IRExpr* e )$/;"	f	file:
aoccCount_Stmt	iropt.c	/^static void aoccCount_Stmt ( UShort* uses, IRStmt* st )$/;"	f	file:
arg	iropt.c	/^            IRTemp arg;$/;"	m	file:
arg1	iropt.c	/^            IRTemp  arg1;$/;"	m	file:
arg1	iropt.c	/^            IRTemp arg1;$/;"	m	file:
arg2	iropt.c	/^            IRTemp  arg2;$/;"	m	file:
arg2	iropt.c	/^            IRTemp arg2;$/;"	m	file:
atbSubst_Expr	iropt.c	/^static IRExpr* atbSubst_Expr ( ATmpInfo* env, IRExpr* e )$/;"	f	file:
atbSubst_Stmt	iropt.c	/^static IRStmt* atbSubst_Stmt ( ATmpInfo* env, IRStmt* st )$/;"	f	file:
atbSubst_Temp	iropt.c	/^static IRExpr* atbSubst_Temp ( ATmpInfo* env, IRTemp tmp )$/;"	f	file:
availExpr_to_IRExpr	iropt.c	/^static IRExpr* availExpr_to_IRExpr ( AvailExpr* ae ) $/;"	f	file:
bias	iropt.c	/^            Int         bias;$/;"	m	file:
bindee	irmatch.h	/^      IRExpr* bindee[N_IRMATCH_BINDERS];$/;"	m
bindee	iropt.c	/^      IRExpr* bindee;$/;"	m	file:
binder	iropt.c	/^      IRTemp  binder;$/;"	m	file:
calc_unroll_factor	iropt.c	/^static Int calc_unroll_factor( IRSB* bb )$/;"	f	file:
cheap_transformations	iropt.c	/^IRSB* cheap_transformations ( $/;"	f	file:
co	iropt.c	/^            IRTemp co;$/;"	m	file:
collapseChain	iropt.c	/^static Bool collapseChain ( IRSB* bb, Int startHere,$/;"	f	file:
collapse_AddSub_chains_BB	iropt.c	/^static void collapse_AddSub_chains_BB ( IRSB* bb )$/;"	f	file:
con1	iropt.c	/^            IRConst con1;$/;"	m	file:
con2	iropt.c	/^            IRConst con2;$/;"	m	file:
considerExpensives	iropt.c	/^static void considerExpensives ( \/*OUT*\/Bool* hasGetIorPutI,$/;"	f	file:
countArgs	irdefs.c	/^static inline Int countArgs ( IRExpr** args )$/;"	f	file:
cprop_BB	iropt.c	/^IRSB* cprop_BB ( IRSB* in )$/;"	f
deepCopyIRCallee	irdefs.c	/^IRCallee* deepCopyIRCallee ( IRCallee* ce )$/;"	f
deepCopyIRConst	irdefs.c	/^IRConst* deepCopyIRConst ( IRConst* c )$/;"	f
deepCopyIRDirty	irdefs.c	/^IRDirty* deepCopyIRDirty ( IRDirty* d )$/;"	f
deepCopyIRExpr	irdefs.c	/^IRExpr* deepCopyIRExpr ( IRExpr* e )$/;"	f
deepCopyIRExprVec	irdefs.c	/^IRExpr** deepCopyIRExprVec ( IRExpr** vec )$/;"	f
deepCopyIRRegArray	irdefs.c	/^IRRegArray* deepCopyIRRegArray ( IRRegArray* d )$/;"	f
deepCopyIRSB	irdefs.c	/^IRSB* deepCopyIRSB ( IRSB* bb )$/;"	f
deepCopyIRSBExceptStmts	irdefs.c	/^IRSB* deepCopyIRSBExceptStmts ( IRSB* bb )$/;"	f
deepCopyIRStmt	irdefs.c	/^IRStmt* deepCopyIRStmt ( IRStmt* s )$/;"	f
deepCopyIRTypeEnv	irdefs.c	/^IRTypeEnv* deepCopyIRTypeEnv ( IRTypeEnv* src )$/;"	f
deltaIRExpr	iropt.c	/^static void deltaIRExpr ( IRExpr* e, Int delta )$/;"	f	file:
deltaIRStmt	iropt.c	/^static void deltaIRStmt ( IRStmt* st, Int delta )$/;"	f	file:
descr	iropt.c	/^            IRRegArray* descr;$/;"	m	file:
do_cse_BB	iropt.c	/^static Bool do_cse_BB ( IRSB* bb )$/;"	f	file:
do_deadcode_BB	iropt.c	/^\/* notstatic *\/ void do_deadcode_BB ( IRSB* bb )$/;"	f
do_iropt_BB	iropt.c	/^IRSB* do_iropt_BB ( IRSB* bb0,$/;"	f
do_redundant_GetI_elimination	iropt.c	/^void do_redundant_GetI_elimination ( IRSB* bb )$/;"	f	file:
do_redundant_PutI_elimination	iropt.c	/^void do_redundant_PutI_elimination ( IRSB* bb )$/;"	f	file:
doesGet	iropt.c	/^      Bool    doesGet;$/;"	m	file:
doesLoad	iropt.c	/^      Bool    doesLoad;$/;"	m	file:
e0	iropt.c	/^            IRTemp e0;$/;"	m	file:
eX	iropt.c	/^            IRTemp eX;$/;"	m	file:
emptyIRDirty	irdefs.c	/^IRDirty* emptyIRDirty ( void ) {$/;"	f
emptyIRSB	irdefs.c	/^IRSB* emptyIRSB ( void )$/;"	f
emptyIRTypeEnv	irdefs.c	/^IRTypeEnv* emptyIRTypeEnv ( void )$/;"	f
eqIRAtom	irdefs.c	/^Bool eqIRAtom ( IRExpr* a1, IRExpr* a2 )$/;"	f
eqIRConst	irdefs.c	/^Bool eqIRConst ( IRConst* c1, IRConst* c2 )$/;"	f
eqIRRegArray	irdefs.c	/^Bool eqIRRegArray ( IRRegArray* descr1, IRRegArray* descr2 )$/;"	f
eq_AvailExpr	iropt.c	/^static Bool eq_AvailExpr ( AvailExpr* a1, AvailExpr* a2 )$/;"	f	file:
expensive_transformations	iropt.c	/^IRSB* expensive_transformations( IRSB* bb )$/;"	f	file:
f64i	iropt.c	/^            ULong f64i;$/;"	m	file:
findPutI	iropt.c	/^IRExpr* findPutI ( IRSB* bb, Int startHere,$/;"	f	file:
flatten_BB	iropt.c	/^static IRSB* flatten_BB ( IRSB* in )$/;"	f	file:
flatten_Expr	iropt.c	/^static IRExpr* flatten_Expr ( IRSB* bb, IRExpr* ex )$/;"	f	file:
flatten_Stmt	iropt.c	/^static void flatten_Stmt ( IRSB* bb, IRStmt* st )$/;"	f	file:
fold_Expr	iropt.c	/^static IRExpr* fold_Expr ( IRExpr* e )$/;"	f	file:
fold_IRExpr_Binop	iropt.c	/^static IRExpr* fold_IRExpr_Binop ( IROp op, IRExpr* a1, IRExpr* a2 )$/;"	f	file:
fold_IRExpr_Unop	iropt.c	/^static IRExpr* fold_IRExpr_Unop ( IROp op, IRExpr* aa )$/;"	f	file:
getAliasingRelation_IC	iropt.c	/^GSAliasing getAliasingRelation_IC ( IRRegArray* descr1, IRExpr* ix1,$/;"	f	file:
getAliasingRelation_II	iropt.c	/^GSAliasing getAliasingRelation_II ( $/;"	f	file:
getArrayBounds	iropt.c	/^static void getArrayBounds ( IRRegArray* descr, $/;"	f	file:
guestAccessWhichMightOverlapPutI	iropt.c	/^Bool guestAccessWhichMightOverlapPutI ( $/;"	f	file:
handle_gets_Stmt	iropt.c	/^static void handle_gets_Stmt ( $/;"	f	file:
identicalPutIs	iropt.c	/^static Bool identicalPutIs ( IRStmt* pi, IRStmt* s2 )$/;"	f	file:
inuse	iropt.c	/^      Bool*  inuse;$/;"	m	file:
invalidateOverlaps	iropt.c	/^static void invalidateOverlaps ( HashHW* h, UInt k_lo, UInt k_hi )$/;"	f	file:
irExpr_to_AvailExpr	iropt.c	/^static AvailExpr* irExpr_to_AvailExpr ( IRExpr* e )$/;"	f	file:
iropt_verbose	iropt.c	/^static Bool iropt_verbose = False; \/* True; *\/$/;"	v	file:
isAdd32OrSub32	iropt.c	/^static Bool isAdd32OrSub32 ( IRExpr* e, IRTemp* tmp, Int* i32 )$/;"	f	file:
isFlat	iropt.c	/^static Bool isFlat ( IRExpr* e )$/;"	f	file:
isFlatIRStmt	irdefs.c	/^Bool isFlatIRStmt ( IRStmt* st )$/;"	f
isOneU1	iropt.c	/^static Bool isOneU1 ( IRExpr* e )$/;"	f	file:
isPlausibleIRType	irdefs.c	/^Bool isPlausibleIRType ( IRType ty )$/;"	f
isZeroU1	iropt.c	/^static Bool isZeroU1 ( IRExpr* e )$/;"	f	file:
is_Binop	iropt.c	/^static inline Bool is_Binop ( IRExpr* e, IROp op ) {$/;"	f	file:
is_Unop	iropt.c	/^static inline Bool is_Unop ( IRExpr* e, IROp op ) {$/;"	f	file:
ix	iropt.c	/^            IRTemp      ix;$/;"	m	file:
key	iropt.c	/^      HWord* key;$/;"	m	file:
lookupHHW	iropt.c	/^static Bool lookupHHW ( HashHW* h, \/*OUT*\/HWord* val, HWord key )$/;"	f	file:
matchIRExpr	irmatch.c	/^Bool matchIRExpr ( MatchInfo* mi, IRExpr* p\/*attern*\/, IRExpr* e\/*xpr*\/ )$/;"	f
matchWrk	irmatch.c	/^Bool matchWrk ( MatchInfo* mi, IRExpr* p\/*attern*\/, IRExpr* e\/*xpr*\/ )$/;"	f	file:
maybe_loop_unroll_BB	iropt.c	/^static IRSB* maybe_loop_unroll_BB ( IRSB* bb0, Addr64 my_addr )$/;"	f	file:
mkIRCallee	irdefs.c	/^IRCallee* mkIRCallee ( Int regparms, HChar* name, void* addr )$/;"	f
mkIRExprCCall	irdefs.c	/^IRExpr* mkIRExprCCall ( IRType retty,$/;"	f
mkIRExprVec_0	irdefs.c	/^IRExpr** mkIRExprVec_0 ( void ) {$/;"	f
mkIRExprVec_1	irdefs.c	/^IRExpr** mkIRExprVec_1 ( IRExpr* arg1 ) {$/;"	f
mkIRExprVec_2	irdefs.c	/^IRExpr** mkIRExprVec_2 ( IRExpr* arg1, IRExpr* arg2 ) {$/;"	f
mkIRExprVec_3	irdefs.c	/^IRExpr** mkIRExprVec_3 ( IRExpr* arg1, IRExpr* arg2, IRExpr* arg3 ) {$/;"	f
mkIRExprVec_4	irdefs.c	/^IRExpr** mkIRExprVec_4 ( IRExpr* arg1, IRExpr* arg2, IRExpr* arg3,$/;"	f
mkIRExprVec_5	irdefs.c	/^IRExpr** mkIRExprVec_5 ( IRExpr* arg1, IRExpr* arg2, IRExpr* arg3,$/;"	f
mkIRExprVec_6	irdefs.c	/^IRExpr** mkIRExprVec_6 ( IRExpr* arg1, IRExpr* arg2, IRExpr* arg3,$/;"	f
mkIRExprVec_7	irdefs.c	/^IRExpr** mkIRExprVec_7 ( IRExpr* arg1, IRExpr* arg2, IRExpr* arg3,$/;"	f
mkIRExpr_HWord	irdefs.c	/^IRExpr* mkIRExpr_HWord ( HWord hw )$/;"	f
mkIRRegArray	irdefs.c	/^IRRegArray* mkIRRegArray ( Int base, IRType elemTy, Int nElems )$/;"	f
mkZeroForXor	iropt.c	/^static IRExpr* mkZeroForXor ( IROp op )$/;"	f	file:
mk_key_GetIPutI	iropt.c	/^static UInt mk_key_GetIPutI ( IRRegArray* descr )$/;"	f	file:
mk_key_GetPut	iropt.c	/^static UInt mk_key_GetPut ( Int offset, IRType ty )$/;"	f	file:
newHHW	iropt.c	/^static HashHW* newHHW ( void )$/;"	f	file:
newIRTemp	irdefs.c	/^IRTemp newIRTemp ( IRTypeEnv* env, IRType ty )$/;"	f
notBool	iropt.c	/^static Bool notBool ( Bool b )$/;"	f	file:
op	iropt.c	/^            IROp    op;$/;"	m	file:
op	iropt.c	/^            IROp   op;$/;"	m	file:
ppAEnv	iropt.c	/^static void ppAEnv ( ATmpInfo* env )$/;"	f	file:
ppIRCallee	irdefs.c	/^void ppIRCallee ( IRCallee* ce )$/;"	f
ppIRConst	irdefs.c	/^void ppIRConst ( IRConst* con )$/;"	f
ppIRDirty	irdefs.c	/^void ppIRDirty ( IRDirty* d )$/;"	f
ppIREffect	irdefs.c	/^void ppIREffect ( IREffect fx )$/;"	f
ppIRExpr	irdefs.c	/^void ppIRExpr ( IRExpr* e )$/;"	f
ppIRJumpKind	irdefs.c	/^void ppIRJumpKind ( IRJumpKind kind )$/;"	f
ppIRMBusEvent	irdefs.c	/^void ppIRMBusEvent ( IRMBusEvent event )$/;"	f
ppIROp	irdefs.c	/^void ppIROp ( IROp op )$/;"	f
ppIRRegArray	irdefs.c	/^void ppIRRegArray ( IRRegArray* arr )$/;"	f
ppIRSB	irdefs.c	/^void ppIRSB ( IRSB* bb )$/;"	f
ppIRStmt	irdefs.c	/^void ppIRStmt ( IRStmt* s )$/;"	f
ppIRTemp	irdefs.c	/^void ppIRTemp ( IRTemp tmp )$/;"	f
ppIRType	irdefs.c	/^void ppIRType ( IRType ty )$/;"	f
ppIRTypeEnv	irdefs.c	/^void ppIRTypeEnv ( IRTypeEnv* env ) {$/;"	f
redundant_get_removal_BB	iropt.c	/^static void redundant_get_removal_BB ( IRSB* bb )$/;"	f	file:
redundant_put_removal_BB	iropt.c	/^static void redundant_put_removal_BB ( $/;"	f	file:
sameIRTemps	iropt.c	/^static Bool sameIRTemps ( IRExpr* e1, IRExpr* e2 )$/;"	f	file:
saneIRCallee	irdefs.c	/^static Bool saneIRCallee ( IRCallee* cee )$/;"	f	file:
saneIRConst	irdefs.c	/^static Bool saneIRConst ( IRConst* con )$/;"	f	file:
saneIRRegArray	irdefs.c	/^static Bool saneIRRegArray ( IRRegArray* arr )$/;"	f	file:
sanityCheckFail	irdefs.c	/^void sanityCheckFail ( IRSB* bb, IRStmt* stmt, HChar* what )$/;"	f
sanityCheckIRSB	irdefs.c	/^void sanityCheckIRSB ( IRSB* bb,          HChar* caller,$/;"	f
setBindee	irmatch.c	/^void setBindee ( MatchInfo* mi, Int n, IRExpr* bindee )$/;"	f	file:
setHints_Expr	iropt.c	/^static void setHints_Expr (Bool* doesLoad, Bool* doesGet, IRExpr* e )$/;"	f	file:
shallowCopyIRExprVec	irdefs.c	/^IRExpr** shallowCopyIRExprVec ( IRExpr** vec )$/;"	f
size	iropt.c	/^      Int    size;$/;"	m	file:
sizeofIRType	irdefs.c	/^Int sizeofIRType ( IRType ty )$/;"	f
spec_helpers_BB	iropt.c	/^IRSB* spec_helpers_BB ( IRSB* bb,$/;"	f	file:
subst_AvailExpr	iropt.c	/^static void subst_AvailExpr ( HashHW* env, AvailExpr* ae )$/;"	f	file:
subst_AvailExpr_Temp	iropt.c	/^static IRTemp subst_AvailExpr_Temp ( HashHW* env, IRTemp tmp )$/;"	f	file:
subst_Expr	iropt.c	/^static IRExpr* subst_Expr ( IRExpr** env, IRExpr* ex )$/;"	f	file:
subst_and_fold_Stmt	iropt.c	/^static IRStmt* subst_and_fold_Stmt ( IRExpr** env, IRStmt* st )$/;"	f	file:
tag	iropt.c	/^      enum { Ut, Btt, Btc, Bct, Cf64i, Mttt, GetIt } tag;$/;"	m	file:
tcExpr	irdefs.c	/^void tcExpr ( IRSB* bb, IRStmt* stmt, IRExpr* expr, IRType gWordTy )$/;"	f	file:
tcStmt	irdefs.c	/^void tcStmt ( IRSB* bb, IRStmt* stmt, IRType gWordTy )$/;"	f	file:
typeOfIRConst	irdefs.c	/^IRType typeOfIRConst ( IRConst* con )$/;"	f
typeOfIRExpr	irdefs.c	/^IRType typeOfIRExpr ( IRTypeEnv* tyenv, IRExpr* e )$/;"	f
typeOfIRTemp	irdefs.c	/^IRType typeOfIRTemp ( IRTypeEnv* env, IRTemp tmp )$/;"	f
typeOfPrimop	irdefs.c	/^void typeOfPrimop ( IROp op, $/;"	f	file:
u	iropt.c	/^      } u;$/;"	m	file:
unsafeIRDirty_0_N	irdefs.c	/^IRDirty* unsafeIRDirty_0_N ( Int regparms, HChar* name, void* addr, $/;"	f
unsafeIRDirty_1_N	irdefs.c	/^IRDirty* unsafeIRDirty_1_N ( IRTemp dst, $/;"	f
useBeforeDef_Expr	irdefs.c	/^void useBeforeDef_Expr ( IRSB* bb, IRStmt* stmt, IRExpr* expr, Int* def_counts )$/;"	f	file:
useBeforeDef_Stmt	irdefs.c	/^void useBeforeDef_Stmt ( IRSB* bb, IRStmt* stmt, Int* def_counts )$/;"	f	file:
useBeforeDef_Temp	irdefs.c	/^void useBeforeDef_Temp ( IRSB* bb, IRStmt* stmt, IRTemp tmp, Int* def_counts )$/;"	f	file:
used	iropt.c	/^      Int    used;$/;"	m	file:
val	iropt.c	/^      HWord* val;$/;"	m	file:
