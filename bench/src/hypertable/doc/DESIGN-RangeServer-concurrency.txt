
Updating

1. Lock the maintenance mutex for the Range
2. If the holdUpdates flag set, wait on the MaintenanceFinished condition variable
   increment update counter
3. Unlock the maintenance mutex
4. Obtain an "update timestamp" from Commit Log
5. Sort modifications into three sets GO, STOP, and SPLIT
  A. GO mods lie within the specified range
  B. STOP mods lie outside the specified range (because of prior split)
  C. SPLIT mods lie within the specified range, but a split is in progress
    and the modifications are for the portion that is being split off
    [NOTE: When a split is pending on the range, if a modification is for the
     split off portion of the range, then if the "update timestamp" is later than
     the "split timestamp", then the modification is marked SPLIT ]
6. Write SPLIT mods to split log
7. Write GO mods to commit log
8. Lock the Range's access locks for all of its CellCaches
9. Apply the SPLIT and GO updates to the Range's CellCaches
9.a Keep track of the timestamp of the latest update added to the range (mLatestTimestamp)
10. For delete modifications, add a special DELETE entry into each CellCache.
    Store iterator pointers to all of the delete entries in a set.  Add this
    set to a sorted list of delete sets, sorted by "update timestamp".
11. Unlock the Range's (CellCache) access locks
12. Lock the maintenance mutex for the Range
13. Decrement update counter
14. If counter is zero, signal the UpdateQuiesce condition variable
15. Unlock the maintenance mutex
16. Send back STOP modifications


Scanning

1. Set "scan timestamp" to the Range's mLatestTimestamp
2. Create a MergeScanner (with shared_ptrs to all underlying CellStores and CellCaches)
3. For each CellCache involved in the scan:
   A. Lock the access lock
   B. Add the scanner to the CellCache's sorted list of scanners (by timestamp)
   C. Unlock the access lock
4. Add the MergeScanner to the Reaper thread's scanner set
5. Lock CellCache's access lock during scanner::next()
6. At end of scan, for each CellCache:
  A. Lock CellCache's access lock
  B. Remove scanner from CellCache's sorted list of scanners.
  C. If the scanner was the 'oldest' outstanding scanner, then apply the deletes from the sorted list of delete sets for any that occur before
   the new 'oldest' outstanding scan timestamp (see Update 10.)
   [NOTE: Since DELETE entries sort ahead of normal entries, a scan starting from the delete entry should suffice to apply the delete. ]
  D. Unlock CellCache's access lock
7. Delete the MergeScanner (thus resetting the shared_ptrs to underlying CellCache/CellStore and possibly garbage collecting these objects)


Compaction

NOTE: There can only be one compaction or split happening for a Range at any given moment

1. Quiesce updates
   A. Set the holdUpdates flag to true
   B. Wait on the UpdateQuiesce condition variable
2. Set the "compaction timestamp "to the Range's mLatestTimestamp
3. Un-quiesce updates
    A. Set the holdUpdates flag to false
    B. Signal the MaintenanceFinished condition variable (to unblock the pending updates)
4. For each AccessGroup:
   A. Scan the relevant CellCache/CellStores creating a new CellStore, including all key/value
      pairs whose timestamp is less than or equal to the compaction timestamp
   B. Do all of the compaction (e.g. update METADATA, etc.)
   C. Lock CellCache access lock
   D. Create a new CellCache from the old one with all of the new entries that were not compacted
   E. Unlock CellCache access lock


Split

NOTE: There can only be one compaction or split happening for a Range at any given moment

1. Determine split point
2. Modify METADATA for existing range with location of split log
3. Quiesce updates (see Compaction 1.)
4. Set the SplitStartTimestamp to mLatestTimestamp
5. Install split log
6  Un-quiesce updates (see Compaction 3.)
[NOTE:  All updates for the split-off portion of the range that have a timestamp later than
        SplitStartTime will be committed to the split log instead of the normal commit log ]

=== At this point, split has commenced.  If the RangeServer crashes, ===
=== it will reconstruct it's state by first replaying the normal commit ===
=== log and then the split log. ===

[[ Check update logic, make sure the right updates are going into the split log ]]

7. Perform a major compaction 
8. Create METADATA entry for new range
   (with pointer to split log, empty 'location' column, and list of CellStores)
9. Update METADATA entry for existing range with new end row and remove split log info
10. Lock the maintenance mutex for the Range
11. Quiesce updates (see Compaction 1.)
12. Do the actual split
    A. Create new CellCaches (memtables) for each AccessGroup in the range
    B. Copy the old CellCache entries for the remaining portion of the split to the new CellCache
    C. Create new CellStore objects that point to CellStore files with a restricted range.
    D. Reset (e.g. clear) the smart pointers to the old CellCache and CellStore objects
       [NOTE: If there are any outstanding scanners on the Range, they will have smart
       pointers to the old CellCache and CellStore objects.  These objects will get
       garbage collected when the last scanner finishes]
13. Un-quiesce updates (see Compaction 3.)
14. Unlock the maintenance mutex

=== At this point the range server is no longer serving the "split off" ===
=== part of the range ===

15. Notify Master of the split
16. Master will select a RangeServer for the new range and issue a LOADRANGE command
    to that RangeServer for the newly created range


LoadRange

1. Lookup Range information from METADATA (verify that an entry for the range exists)


[TBD]


ISSUES:
- How does the Master know what CellStore files to garbage collect?
- Memory accounting after split.  Any oustanding scanners will hold reference to the old CellCaches and CellStores,
  should we worry about accounting for this memory?  Or should we just assume that it will get garbaged collected
  promptly and not account for it.
