
WARNING: Some of this information is out of date.

Master/RangeServer Interaction
- Master is responsible for:
  1. assigning tablets to tablet servers
  2. detecting the addition and expiration of tablet servers
  3. Balancing tablet server load
  4. Garbage collection of files in GFS
  5. Schema changes such as table and column family creations



Determining Split Key
- Theoretically, the entire table should be scanned and the median key should
  be chosen for the split key.
- Since this is not feasible, each sstable, when it gets written should compute
  a split point and save it in the file.
- When a split occurs, all of the split points should get inserted into a heap
  along with the sstable timestamp.  The heap should be sorted on the timestamp
- The top K records in the heap should be chosen to determine the split key, by
  sorting the top K keys and selecting the median.  This means that the top K
  most recently created sstables will be used to determine the split key and these
  tables should not be shared since they are the most recent ones created.
- clock skew.  If there is significant clock skew among machines, it could be
  problematic since the most recent sstables might not get chosen and the tables
  that are chosen might be shared and the split key will be incorrect.


Inserts
-------
- Lookup table to apply mutations to
- For each K/V ...
  Locate owning tablet
  For K/V pairs that belong to a tablet, buffer them in goBuf
  For K/V pairs that don't belong to a loaded tablet, buffer them in stopBuf
  Write goBuf to CommitLog
  Send back response
    If stopBuf is emtpy send back Error::OK
    If stopBuf is empty send back Error::TABLETSERVER_NOT_OWNER
  For all of the K/V pairs in goBuf...
    - Determine which Memtable it belongs to
    - Add K/V pair to Memtable

'Info' column of METADATA table

StartRow:
EndRow:
SplitTime:
SplitRow:
SSTable
SSTable
SSTable
SSTable
CommitLog (e.g. directory of where log roll files are)


Commit Log
----------
1. Each tablet server maintains a commit log
2. The location of the commit log is stored in the 'Info' column of the METADATA table
3. When a tablet server loads a tablet it does the following:
  - Read the Info column of the METADATA table to find the commit logs and pointers
  - Create empty Memtables
  - Scan the commit logs applying the appropriate mutations

- When does the commit log pointer advance?

- For every Tablet LocalityGroup there is a Memtable.  For every Memtable, there is 
  a pointer into the commit log.

Compactions happen for the following reasons:
1. To free up memeory
2. To advance the earliest commit log pointer

When a compaction happens

- The Memtables are kept in a reverse heap where the comparison value is the commit log pointer
  When a compaction happens, the top of the heap is considered for compaction.

- mini commit log during split?
- As soon as a split commences, a mini-commit log gets created for the part of the split that is 
  going to get re-assigned.  This commit log could be some sort of well known

The 'Info' column gets written out
- When a split o

As soon as a split commences, 

Format of CommitLog entries:

- At the end of each commit log file will be a timestamp 't'.  This timestamp says
  that there are no mutations with a timestamp 't' or less in any later log.
- Written into each SSTable will be a timestamp 't' that indicates that,
  for *this* locality group,  you can ignore all log entries older than 't'


Loading a tablet
----------------
1. Load all of the SSTables
2. Step 1 will generate a timestamp 't' for each LocalityGroup which is the latest 't' discovered
   in all of the SSTables for the locality group
3. Create a Memtable for each locality group
4. Scan the commit log applying all of the mutations to the LocalityGroup memtables whose
   timestamp is > 't'


Updates During Split
--------------------
- Updates 
  1. lock the commit log
  2. Scan for tablets partitioning updates into GO, STOP, and SPLIT
  3. Commit updates
  4. Unlock commit log

Split
-----
NOTE:  For now, we assume single split thread, (e.g. only one split at a time)
       We also assume we have a GFS that is usable for a commit log
1. Modify METADATA for existing tablet with location of split log
2. Lock the commit log
3. Determine split point
4. Create split log
5. Modify tablet to include split point and pointer to split log
6. Open Split log and add to split log map
7. Unlock commit log
=== at this point, split has commenced ===
1. Start committing all incoming mutations for the "split off" part of the tablet
   to the split log (still modifying memtables)
2. Major compaction
3. Create METADATA entry for new tablet (with SSTable and split log)
 [ At this point, if the tablet server crashes, the Master should be able ]
 [ to notice this because of the overlapping tablets and should adjust    ]
 [ the existing tablet with the new start row and drop the split log      ]
4. Lock the commit log
5. Cancel scanners (Poison the scanners that are on the remaining portion of the tablet)
6. Modify existing tablet with new StartRow (drop split point and split log)
7. Unlock commit log
==== at this point the tablet server is no longer serving the "split off" part of the tablet ===
8. Update METADATA entry for tablet with new EndRow and drop the split log
9. Notify master of the split

Loading a tablet
- If METADATA contains a split log, then replay it in addition to the commit log,
  Then remove the split log info from the METADATA 


Older thoughts on Split
-----------------------
1. A split point is selected by scanning the indexes of any loaded SSTables (new endRow)
2. Create the new tablet directory
3. A mini-commit log is created in the new tablet directory
4. Record the current time as the split time
5. Write the split point and the split time into the METADATA table for the existing tablet
--- at this point the split has commenced ---
6. Shunt all mutations to the "other" part of the split to the commit log (as well as the memtable)
7. Kick off a major compaction (only use Memtable entries before the split time)
8. Stop serving old tablet range (send back OUT_OF_RANGE messages)
9. Close the mini-commit log
10. Purge memtables of entries that are out of range
11. Write the 'Info' column for the new tablet
--- at this point, the new tablet exists ---
12. Send Master a message informing of the split
13. Update 'Info' column of METADATA table to indicate the new (smaller) range for this tablet



Directory layout
----------------

/bigtable/servers/109.96.123.234
/bigtable/servers/109.96.123.234/logs/
/bigtable/servers/109.96.123.234/logs/0.log
/bigtable/servers/109.96.123.234/logs/1.log
/bigtable/servers/109.96.123.234/logs/2.log

Format:
/bigtable/tables/<TableName>/<TabletId>/<LocalityGroup><UniqueId>

Example:
/bigtable/tables/Webtable/abcdef0123abcdef0123abcd/default1234
/bigtable/tables/Webtable/abcdef0123abcdef0123abcd/default2345
/bigtable/tables/Webtable/abcdef0123abcdef0123abcd/default9123
/bigtable/tables/Webtable/abcdef0123abcdef0123abcd/ext8273
/bigtable/tables/Webtable/abcdef0123abcdef0123abcd/ext1823

Tablet Server Architecture
--------------------------
- Memtable is logically split into n pieces, one for each locality group
- Memory is tracked per-locality group.  When memory for a locality group grows beyond
  a certain size, then the memtable for that locality group is frozen and a new memtable
  is created.  The frozen locality group memtable is then written out as an SSTable
  (minor compaction)
- Memtable is basically a data structure that maps row keys to a list of cells for that row
- When a scanner seeks onto a particular row, it acquires a read lock.  If a subsequent
  update arrives, it will try to acquire a write lock.  If it fails, it will chain the mutations
  onto a secondary row.

Client Mechanics
----------------

=== Fetching a Cell ===

STEP 1:  Locate the tablet server that contains the cell
1. Convert the Table name to a table identifier, N
2. Fetch the root tablet location from Chubby
3. Issue a 'Lookup' command to the root tablet with the following key:
   TableId=0:TableId=N:rowKey
4. Issue a 'Lookup' command to the tablet returned in #3 with the following key:
   TableId=N:rowKey

STEP 2:
1. Create a scanner on the tablet discovered in step 1.  Set the start key
  and end key to have the same row and column identifiers of the cell being
  looked up.  If tablet server returns an error indicating that the tablet
  no longer includes the start of the requested range, then go back to Step
  1 and find the new tablet.
2. Call FetchNextBlock and return the next tuple out of the block.

=== Set/Delete ===

1. Determine location of tablet that is the target of the modifications.  Or, kick
off location search.
2. Add mutation to queue for tablet server

=== Group Commit ===

- Send UPDATE command to all of the tablet servers with queued mutations.
- Wait for them to complete
- Return a Result object containing the mutations that failed

=== Tablet Split ===
- A client may request operations on data in a row range that a tablet server that is no longer serving
  due to a tablet spit.  In this situation, the tablet server will return an error notifying the client
  of the situation.  The client will then lookup in the METADATA table for the location of the new tablet.
  If the tablet was split, but the master lost the notification, then the tablet remains unassigned.  In
  this situation, the location information in the METADATA table will be 0.0.0.0.  The client should then
  notify the master that this new tablet is to be reassigned.


Tablet Server API
-----------------
- Create scanner(TabletID, predicate)
- FetchNextBlock(ScannerID)
- Update(TabletId, series of updates)
- LoadTablet

Tablet Assignment
-----------------
- Master keeps track of tablet assignment and writes that information into the METADATA table
  (This location information must consist of a mapping from  TableID,TabletID to IP Address.


METADATA Table
--------------
Stores Tablet location information

key=tableId,endrow,cf="location"
Value=IPAddress,TabletId(12 bytes)

key=tableId,endrow,cf="SSTables"
Value={list of SSTables}

key=tableId,endrow,cf="startTime"
Value=NULL

---------

Tablet Splitting

Each SSTable object can have a starting row and/or ending row delimiter which

1. A row is selected as the split point
2. Minor compaction
3. Commit subsequent mutations destined for the other split to a special commit log
4. Commit the split by by recording the new tablet information in the METADATA table
5. Stop accepting mutations for the new tablet
6. Notify the master of the new tablet

How are deletes of SSTable cells propagated from one Tablet server to another?

Each SSTable has a creation time.
When a cell or a row gets deleted, a deletion entry gets added to the memtable.
These deletion entries get written out to an SSTable during a minor or merging
compaction and have the effect of suppressing deleted data from all *older* SSTables.

Each new SSTable gets recorded in the METADATA table with a timestamp of when it got created.

-----

Q: How does a Tablet Server come up and find all the SSTables for a tablet it is trying to load?
A: It reads METADATA 'Info' column

Compaction
----------
1. Compaction timestamp is obtained from the commit log (and split log?)
   (All memtable entries with that timestamp or less are compacted)
2. Mutations and scans can proceed as normal
3. Compaction happens (new SSTable is created)
4. Timestamp and superseded SSTables are written into the new SSTable
==== At this point compaction is persistent ====
[ if tablet server crashes, it will scan it's directory and notice the
  new SSTable and drop the old tables and log entries ]
5. Update METADATA with new SSTable info
6. Lock the tablet (drain off mutators and poison scanners)
7. Remove superseded SSTables and add them to delete list
8. Add newly compacted SSTable to tablet
9. Purge Memtables of all compacted entries
10. Unlock tablet
11.  Delete superseded SSTables

[ !! Add write-up for tablet loading under all failure scenarios ]

Older thoughts ...
- When a new SSTable is created during compaction, the following information is stored in
  the newly created SSTable:
1. An offset into the commit log indicated the portion of the log covered by this SSTable
2. Maybe the name of the commit log
3. If the SSTable is being created by a merging or major compaction, it contains a list of the
   SSTables (filenames) that are included in this SSTable.

- Every table should have a list of scanners that are attached to it.  When a table is no longer
  relevant due to a compaction, it should cancel all of the scanners that are attached to it.
  The MergeVeiw should notice when some of its scanners have been cancelled and then do a
  reconfiguration by saving the "next cell" that it was about to read and then re-aggregating
  a new set of tables and restarting the scan by seeking any newly added scanners to the
  "next cell".
- The Lock() method should fail (return false) if a scanner has been cancelled.
- After the new compact SSTable has been written, the compaction "thread" should
  acquire a Tablet-level "Change lock" before it walks through and cancels all of
  the scanners associated with the no longer relevant tables.  When a MergeView
  notices that one of the scanners has been cancelled it can call a Tablet-level
  method WaitForChangeComplete, which essentially blocks on the "Change lock" until
  the compaction "thread" finishes cancelling all of the scanners.  When
  the MergeView drops out of the WaitForChangeComplete method, it knows that all
  the scanners that should have been cancel, have been cancelled and it can then
  re-configure.
- Each Table should have a (scanner) reference count when the table has the 'deleted'
  bit set and the last scanner decrements the reference count, the table should
  get deleted.


- Add tablet location cache to client

-------

Concrrent reads and writes

1. Single mutex protecting Memtable
2. Readers and writers lock the mutex before scanning and inserting
3. Writers don't remove mappings, they just add records and delete records
4. When delete records are added, the quantity of data that would be freed
   by the deletes is added to a running total
5. The timestamp of the oldest scanner is mantained in the Memtable
6. Periodically, a cleanup thread runs on tables with lots of deleted
   data and purges the cells that have been deleted *and* whose timestamp
   is older than the oldest scanner.  It will call a Poison() method on
   all of the outstanding scanners that tells them to reposition their
   iterators on the next run.
