
Hyperspace:
- Add checkpointing and commit log
- Add consistent gid to requests

TODO:
- Add Create command to Hyperspace that allows caller to supply initial attributes
- Add ReactorFactory::Destroy
- Get rid of connection ID from Event structure
- Add support for ExpireTime column garbage collection as well as time
  interval support for scanners
- Make sure NULL endkey lookups work in RangeServer
- Add support for LZO and BZIP2 compression
- Implement 'InMemory' locality groups
- Figure out why poll drops out of RangeServer/main.cc when gdb detaches from process
- Writes to the commit log should be asynchronous (or concurrent)
- In AccessGroup::RunCompaction, on major compaction check if the oldest
  CellCache entry is newer than the supplied timestamp, if so return
- Move as much stuff as makes sense from CellStoreV0 to CellStore
- Add a way to destroy a ConnectionManager (including Comm::Disconnect)
- Try to move some of the RangerServer::Global members to RangeServer class members
- Fatten up HdfsBroker test
- Rename RangeServer/Global::localityGroup member names
- Add ReactorFactory::Shutdown
- Add "Scan Cache"
- Add Bloom filter
- Add user supplied compression type to LocalityGroup
- Use Findbugs (http://findbugs.sourceforge.net/) to find bugs in Java code.
- Add access control


DONE:
- Make serverup quiet when checking for un-initialized Master
- Add user supplied block size to LocalityGroup
- Add better split key computation logic (exponential backoff sampler)
- Add Connection canceling logic to AsyncComm
- Modified RangeServer UPDATE command to accept updates for any/all of the server's ranges instead of just a single range
- Added atomic open/lock commands to Hyperspace
- Got RangeServer birth/death discovery logic working in Master
- Implement single-server Hyperspace
- Change EventPtr to intrusive_ptr
- Add recursive delete to dfsclient and then modify start-servers.sh to use this to cleanup
- Re-write RangeServer regression tests to use rsclient against a real RangeServer
- Clean up hyperspace tool
- Add support for RowLimit
- Add support for CellLimit
- Change KeepCopies attribute of column family to CellLimit
- Add support for auto-assigned timestamps
- Remove msgId return parameter from CallbackHandlerSynchronizer and all of the client APIs
- Add RangeServerClient
- Clean up CommBuf, get rid of Prepend* methods in CommBuf for normal forward serialization methods
- Fix AsyncComm/Protocol::StringFormatMessage (get rid of command)
- Add new DELETE handling in RangeServer
- Abstract the Filesystem and Dfs Broker
- Change ResponseCallback::response to response_ok in C++ source
- Add serverup program to verify if the various servers are up
- Change Range key to endRow
- Change CellStoreV0 to use last key in block for index entry
- Create ScanContext class and push object of this type into CreateScanner APIs
- Make sure single row range restriction works in CreateScanner
- Get rid of accessGroup argument to COMPACTION command
- Clean up java/org/hypertable/Hypertable/RangeServer/Command*
- Overhaul CreateScanner scan spec
- Add back CellStore::CreateScanner
- Fix copyright header notice to be GPL
- Replace KeyT type with ByteString32T
- Get rid of smart pointers in CellCache key/value map
- Add Hyperspace regression test
- Remove command code from response message
- Sweep through HyperspaceClient and get rid of references to Placer, also make
  sure Hyperspace requests to the same file are serialized
- Restructure Hyperspace to use ICE-like object model
- Move HdfsClient to same level as Hypertable in C++ tree
- Restructure HdfsBroker to use ICE-like object model
- Get cellStoreTest working on Linux (add consistent random number generator)
- Add support to threadGroup in AsyncComm
- Figure out why Hyperspace periodically hangs
- Add ~Comm (AsyncComm test is segfaulting at the end because of this)
- The event object passed to the application by AsyncComm should be a smart pointer
- Fix MessageBuilder stuff.


DEFERRED:
- Push try/catch blocks out of HdfsBroker methods and up into the RequestHandler
  objects that call them.  NOTE: ICE actually prefers that method implementations
  use the callback object to report errors.  Therefore, we should keep the try/catch
  blocks and report errors via the callback object.


Original estimate:

- Finish Tablet Server (1 week)
  - Split processing
  - Add complete parameters to CREATE SCANNER
  - Add FETCH SCANBLOCK command
  - Implement 'InMemory' locality groups
  - Add support for auto-assigned timestamps
- Host METADATA using Tablet Server (1 week)
- Finish Master (2 weeks)
  - METADATA scan
  - Garbage collection
  - Split
  - Tablet Server UDP Ping
  - Add table modification command
- Client library (2 weeks)
  - Location lookup & cache
  - Implement Scanner
  - Implement Mutater
- Write Hadoop InputFormat class for SSTables (1 week)
