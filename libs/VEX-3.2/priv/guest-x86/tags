!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.5.4	//
ACTIONS_ADC	ghelpers.c	200;"	d	file:
ACTIONS_ADD	ghelpers.c	158;"	d	file:
ACTIONS_DEC	ghelpers.c	286;"	d	file:
ACTIONS_INC	ghelpers.c	266;"	d	file:
ACTIONS_LOGIC	ghelpers.c	250;"	d	file:
ACTIONS_ROL	ghelpers.c	345;"	d	file:
ACTIONS_ROR	ghelpers.c	362;"	d	file:
ACTIONS_SBB	ghelpers.c	225;"	d	file:
ACTIONS_SHL	ghelpers.c	307;"	d	file:
ACTIONS_SHR	ghelpers.c	325;"	d	file:
ACTIONS_SMUL	ghelpers.c	403;"	d	file:
ACTIONS_SUB	ghelpers.c	179;"	d	file:
ACTIONS_UMUL	ghelpers.c	377;"	d	file:
ALWAYSDEFD	ghelpers.c	2500;"	d	file:
BtOp	toIR.c	/^typedef enum { BtOpNone, BtOpSet, BtOpReset, BtOpComp } BtOp;$/;"	t	file:
BtOpComp	toIR.c	/^typedef enum { BtOpNone, BtOpSet, BtOpReset, BtOpComp } BtOp;$/;"	e	file:
BtOpNone	toIR.c	/^typedef enum { BtOpNone, BtOpSet, BtOpReset, BtOpComp } BtOp;$/;"	e	file:
BtOpReset	toIR.c	/^typedef enum { BtOpNone, BtOpSet, BtOpReset, BtOpComp } BtOp;$/;"	e	file:
BtOpSet	toIR.c	/^typedef enum { BtOpNone, BtOpSet, BtOpReset, BtOpComp } BtOp;$/;"	e	file:
COPY_U128	ghelpers.c	1711;"	d	file:
COPY_U128	ghelpers.c	1725;"	d	file:
CVT	toIR.c	8742;"	d	file:
CVT	toIR.c	8751;"	d	file:
CVT	toIR.c	8785;"	d	file:
CVT	toIR.c	8794;"	d	file:
CVT	toIR.c	8881;"	d	file:
CVT	toIR.c	8890;"	d	file:
CVT	toIR.c	8953;"	d	file:
CVT	toIR.c	8964;"	d	file:
CVT	toIR.c	9151;"	d	file:
CVT	toIR.c	9160;"	d	file:
CVT	toIR.c	9191;"	d	file:
CVT	toIR.c	9202;"	d	file:
DIP	toIR.c	13284;"	d	file:
DIP	toIR.c	194;"	d	file:
DIS	toIR.c	13285;"	d	file:
DIS	toIR.c	198;"	d	file:
LibVEX_GuestX86_get_eflags	ghelpers.c	/^UInt LibVEX_GuestX86_get_eflags ( \/*IN*\/VexGuestX86State* vex_state )$/;"	f
LibVEX_GuestX86_initialise	ghelpers.c	/^void LibVEX_GuestX86_initialise ( \/*OUT*\/VexGuestX86State* vex_state )$/;"	f
LibVEX_GuestX86_put_eflag_c	ghelpers.c	/^LibVEX_GuestX86_put_eflag_c ( UInt new_carry_flag,$/;"	f
OFFB_ACFLAG	toIR.c	227;"	d	file:
OFFB_CC_DEP1	toIR.c	219;"	d	file:
OFFB_CC_DEP2	toIR.c	220;"	d	file:
OFFB_CC_NDEP	toIR.c	221;"	d	file:
OFFB_CC_OP	toIR.c	218;"	d	file:
OFFB_CS	toIR.c	232;"	d	file:
OFFB_DFLAG	toIR.c	225;"	d	file:
OFFB_DS	toIR.c	233;"	d	file:
OFFB_EAX	toIR.c	207;"	d	file:
OFFB_EBP	toIR.c	212;"	d	file:
OFFB_EBX	toIR.c	208;"	d	file:
OFFB_ECX	toIR.c	209;"	d	file:
OFFB_EDI	toIR.c	214;"	d	file:
OFFB_EDX	toIR.c	210;"	d	file:
OFFB_EIP	toIR.c	216;"	d	file:
OFFB_EMWARN	toIR.c	251;"	d	file:
OFFB_ES	toIR.c	234;"	d	file:
OFFB_ESI	toIR.c	213;"	d	file:
OFFB_ESP	toIR.c	211;"	d	file:
OFFB_FC3210	toIR.c	229;"	d	file:
OFFB_FPREGS	toIR.c	223;"	d	file:
OFFB_FPROUND	toIR.c	230;"	d	file:
OFFB_FPTAGS	toIR.c	224;"	d	file:
OFFB_FS	toIR.c	235;"	d	file:
OFFB_FTOP	toIR.c	228;"	d	file:
OFFB_GDT	toIR.c	239;"	d	file:
OFFB_GS	toIR.c	236;"	d	file:
OFFB_IDFLAG	toIR.c	226;"	d	file:
OFFB_LDT	toIR.c	238;"	d	file:
OFFB_NRADDR	toIR.c	255;"	d	file:
OFFB_SS	toIR.c	237;"	d	file:
OFFB_SSEROUND	toIR.c	241;"	d	file:
OFFB_TILEN	toIR.c	254;"	d	file:
OFFB_TISTART	toIR.c	253;"	d	file:
OFFB_XMM0	toIR.c	242;"	d	file:
OFFB_XMM1	toIR.c	243;"	d	file:
OFFB_XMM2	toIR.c	244;"	d	file:
OFFB_XMM3	toIR.c	245;"	d	file:
OFFB_XMM4	toIR.c	246;"	d	file:
OFFB_XMM5	toIR.c	247;"	d	file:
OFFB_XMM6	toIR.c	248;"	d	file:
OFFB_XMM7	toIR.c	249;"	d	file:
PREAMBLE	ghelpers.c	138;"	d	file:
PROFILE_EFLAGS	ghelpers.c	80;"	d	file:
R_AH	toIR.c	274;"	d	file:
R_AL	toIR.c	273;"	d	file:
R_CS	toIR.c	278;"	d	file:
R_DS	toIR.c	280;"	d	file:
R_EAX	toIR.c	264;"	d	file:
R_EBP	toIR.c	269;"	d	file:
R_EBX	toIR.c	267;"	d	file:
R_ECX	toIR.c	265;"	d	file:
R_EDI	toIR.c	271;"	d	file:
R_EDX	toIR.c	266;"	d	file:
R_ES	toIR.c	277;"	d	file:
R_ESI	toIR.c	270;"	d	file:
R_ESP	toIR.c	268;"	d	file:
R_FS	toIR.c	281;"	d	file:
R_GS	toIR.c	282;"	d	file:
R_SS	toIR.c	279;"	d	file:
SEL	toIR.c	10312;"	d	file:
SEL	toIR.c	10319;"	d	file:
SEL	toIR.c	10353;"	d	file:
SEL	toIR.c	10363;"	d	file:
SEL	toIR.c	10397;"	d	file:
SEL	toIR.c	10407;"	d	file:
SEL	toIR.c	8399;"	d	file:
SEL	toIR.c	8406;"	d	file:
SELD	toIR.c	8485;"	d	file:
SELD	toIR.c	8494;"	d	file:
SELD	toIR.c	9732;"	d	file:
SELD	toIR.c	9740;"	d	file:
SELS	toIR.c	8486;"	d	file:
SELS	toIR.c	8495;"	d	file:
SELS	toIR.c	9733;"	d	file:
SELS	toIR.c	9741;"	d	file:
SHIFT_BY_IMM	toIR.c	5665;"	d	file:
SHIFT_BY_IMM	toIR.c	5690;"	d	file:
SHIFT_BY_REG	toIR.c	5635;"	d	file:
SHIFT_BY_REG	toIR.c	5653;"	d	file:
SHOW_COUNTS_NOW	ghelpers.c	443;"	d	file:
SSEZERO	ghelpers.c	2427;"	d	file:
SSEZERO	ghelpers.c	2439;"	d	file:
X86CondAlways	gdefs.h	/^      X86CondAlways = 16  \/* HACK *\/$/;"	e
X86CondB	gdefs.h	/^      X86CondB      = 2,  \/* below              *\/$/;"	e
X86CondBE	gdefs.h	/^      X86CondBE     = 6,  \/* below or equal     *\/$/;"	e
X86CondL	gdefs.h	/^      X86CondL      = 12, \/* jump less          *\/$/;"	e
X86CondLE	gdefs.h	/^      X86CondLE     = 14, \/* less or equal      *\/$/;"	e
X86CondNB	gdefs.h	/^      X86CondNB     = 3,  \/* not below          *\/$/;"	e
X86CondNBE	gdefs.h	/^      X86CondNBE    = 7,  \/* not below or equal *\/$/;"	e
X86CondNL	gdefs.h	/^      X86CondNL     = 13, \/* not less           *\/$/;"	e
X86CondNLE	gdefs.h	/^      X86CondNLE    = 15, \/* not less or equal  *\/$/;"	e
X86CondNO	gdefs.h	/^      X86CondNO     = 1,  \/* no overflow        *\/$/;"	e
X86CondNP	gdefs.h	/^      X86CondNP     = 11, \/* not parity even    *\/$/;"	e
X86CondNS	gdefs.h	/^      X86CondNS     = 9,  \/* not negative       *\/$/;"	e
X86CondNZ	gdefs.h	/^      X86CondNZ     = 5,  \/* not zero           *\/$/;"	e
X86CondO	gdefs.h	/^      X86CondO      = 0,  \/* overflow           *\/$/;"	e
X86CondP	gdefs.h	/^      X86CondP      = 10, \/* parity even        *\/$/;"	e
X86CondS	gdefs.h	/^      X86CondS      = 8,  \/* negative           *\/$/;"	e
X86CondZ	gdefs.h	/^      X86CondZ      = 4,  \/* zero               *\/$/;"	e
X86Condcode	gdefs.h	/^   X86Condcode;$/;"	t
X86G_CC_MASK_A	gdefs.h	188;"	d
X86G_CC_MASK_C	gdefs.h	189;"	d
X86G_CC_MASK_O	gdefs.h	185;"	d
X86G_CC_MASK_P	gdefs.h	190;"	d
X86G_CC_MASK_S	gdefs.h	186;"	d
X86G_CC_MASK_Z	gdefs.h	187;"	d
X86G_CC_OP_ADCB	gdefs.h	/^    X86G_CC_OP_ADCB,    \/* 7 *\/$/;"	e
X86G_CC_OP_ADCL	gdefs.h	/^    X86G_CC_OP_ADCL,    \/* 9 *\/$/;"	e
X86G_CC_OP_ADCW	gdefs.h	/^    X86G_CC_OP_ADCW,    \/* 8 DEP1 = argL, DEP2 = argR ^ oldCarry, NDEP = oldCarry *\/$/;"	e
X86G_CC_OP_ADDB	gdefs.h	/^    X86G_CC_OP_ADDB,    \/* 1 *\/$/;"	e
X86G_CC_OP_ADDL	gdefs.h	/^    X86G_CC_OP_ADDL,    \/* 3 *\/$/;"	e
X86G_CC_OP_ADDW	gdefs.h	/^    X86G_CC_OP_ADDW,    \/* 2 DEP1 = argL, DEP2 = argR, NDEP = unused *\/$/;"	e
X86G_CC_OP_COPY	gdefs.h	/^    X86G_CC_OP_COPY=0,  \/* DEP1 = current flags, DEP2 = 0, NDEP = unused *\/$/;"	e
X86G_CC_OP_DECB	gdefs.h	/^    X86G_CC_OP_DECB,    \/* 19 *\/$/;"	e
X86G_CC_OP_DECL	gdefs.h	/^    X86G_CC_OP_DECL,    \/* 21 *\/$/;"	e
X86G_CC_OP_DECW	gdefs.h	/^    X86G_CC_OP_DECW,    \/* 20 DEP1 = result, DEP2 = 0, NDEP = oldCarry (0 or 1) *\/$/;"	e
X86G_CC_OP_INCB	gdefs.h	/^    X86G_CC_OP_INCB,    \/* 16 *\/$/;"	e
X86G_CC_OP_INCL	gdefs.h	/^    X86G_CC_OP_INCL,    \/* 18 *\/$/;"	e
X86G_CC_OP_INCW	gdefs.h	/^    X86G_CC_OP_INCW,    \/* 17 DEP1 = result, DEP2 = 0, NDEP = oldCarry (0 or 1) *\/$/;"	e
X86G_CC_OP_LOGICB	gdefs.h	/^    X86G_CC_OP_LOGICB,  \/* 13 *\/$/;"	e
X86G_CC_OP_LOGICL	gdefs.h	/^    X86G_CC_OP_LOGICL,  \/* 15 *\/$/;"	e
X86G_CC_OP_LOGICW	gdefs.h	/^    X86G_CC_OP_LOGICW,  \/* 14 DEP1 = result, DEP2 = 0, NDEP = unused *\/$/;"	e
X86G_CC_OP_NUMBER	gdefs.h	/^    X86G_CC_OP_NUMBER$/;"	e
X86G_CC_OP_ROLB	gdefs.h	/^    X86G_CC_OP_ROLB,    \/* 28 *\/$/;"	e
X86G_CC_OP_ROLL	gdefs.h	/^    X86G_CC_OP_ROLL,    \/* 30 *\/$/;"	e
X86G_CC_OP_ROLW	gdefs.h	/^    X86G_CC_OP_ROLW,    \/* 29 DEP1 = res, DEP2 = 0, NDEP = old flags *\/$/;"	e
X86G_CC_OP_RORB	gdefs.h	/^    X86G_CC_OP_RORB,    \/* 31 *\/$/;"	e
X86G_CC_OP_RORL	gdefs.h	/^    X86G_CC_OP_RORL,    \/* 33 *\/$/;"	e
X86G_CC_OP_RORW	gdefs.h	/^    X86G_CC_OP_RORW,    \/* 32 DEP1 = res, DEP2 = 0, NDEP = old flags *\/$/;"	e
X86G_CC_OP_SBBB	gdefs.h	/^    X86G_CC_OP_SBBB,    \/* 10 *\/$/;"	e
X86G_CC_OP_SBBL	gdefs.h	/^    X86G_CC_OP_SBBL,    \/* 12 *\/$/;"	e
X86G_CC_OP_SBBW	gdefs.h	/^    X86G_CC_OP_SBBW,    \/* 11 DEP1 = argL, DEP2 = argR ^ oldCarry, NDEP = oldCarry *\/$/;"	e
X86G_CC_OP_SHLB	gdefs.h	/^    X86G_CC_OP_SHLB,    \/* 22 DEP1 = res, DEP2 = res', NDEP = unused *\/$/;"	e
X86G_CC_OP_SHLL	gdefs.h	/^    X86G_CC_OP_SHLL,    \/* 24 *\/$/;"	e
X86G_CC_OP_SHLW	gdefs.h	/^    X86G_CC_OP_SHLW,    \/* 23 where res' is like res but shifted one bit less *\/$/;"	e
X86G_CC_OP_SHRB	gdefs.h	/^    X86G_CC_OP_SHRB,    \/* 25 DEP1 = res, DEP2 = res', NDEP = unused *\/$/;"	e
X86G_CC_OP_SHRL	gdefs.h	/^    X86G_CC_OP_SHRL,    \/* 27 *\/$/;"	e
X86G_CC_OP_SHRW	gdefs.h	/^    X86G_CC_OP_SHRW,    \/* 26 where res' is like res but shifted one bit less *\/$/;"	e
X86G_CC_OP_SMULB	gdefs.h	/^    X86G_CC_OP_SMULB,   \/* 37 *\/$/;"	e
X86G_CC_OP_SMULL	gdefs.h	/^    X86G_CC_OP_SMULL,   \/* 39 *\/$/;"	e
X86G_CC_OP_SMULW	gdefs.h	/^    X86G_CC_OP_SMULW,   \/* 38 DEP1 = argL, DEP2 = argR, NDEP = unused *\/$/;"	e
X86G_CC_OP_SUBB	gdefs.h	/^    X86G_CC_OP_SUBB,    \/* 4 *\/$/;"	e
X86G_CC_OP_SUBL	gdefs.h	/^    X86G_CC_OP_SUBL,    \/* 6 *\/$/;"	e
X86G_CC_OP_SUBW	gdefs.h	/^    X86G_CC_OP_SUBW,    \/* 5 DEP1 = argL, DEP2 = argR, NDEP = unused *\/$/;"	e
X86G_CC_OP_UMULB	gdefs.h	/^    X86G_CC_OP_UMULB,   \/* 34 *\/$/;"	e
X86G_CC_OP_UMULL	gdefs.h	/^    X86G_CC_OP_UMULL,   \/* 36 *\/$/;"	e
X86G_CC_OP_UMULW	gdefs.h	/^    X86G_CC_OP_UMULW,   \/* 35 DEP1 = argL, DEP2 = argR, NDEP = unused *\/$/;"	e
X86G_CC_SHIFT_A	gdefs.h	181;"	d
X86G_CC_SHIFT_C	gdefs.h	182;"	d
X86G_CC_SHIFT_O	gdefs.h	178;"	d
X86G_CC_SHIFT_P	gdefs.h	183;"	d
X86G_CC_SHIFT_S	gdefs.h	179;"	d
X86G_CC_SHIFT_Z	gdefs.h	180;"	d
X86G_FC_MASK_C0	gdefs.h	201;"	d
X86G_FC_MASK_C1	gdefs.h	200;"	d
X86G_FC_MASK_C2	gdefs.h	199;"	d
X86G_FC_MASK_C3	gdefs.h	198;"	d
X86G_FC_SHIFT_C0	gdefs.h	196;"	d
X86G_FC_SHIFT_C1	gdefs.h	195;"	d
X86G_FC_SHIFT_C2	gdefs.h	194;"	d
X86G_FC_SHIFT_C3	gdefs.h	193;"	d
XXX	toIR.c	5143;"	d	file:
XXX	toIR.c	5217;"	d	file:
__LIBVEX_GUEST_X86_DEFS_H	gdefs.h	50;"	d
abdU8	ghelpers.c	/^static inline UChar abdU8 ( UChar xx, UChar yy ) {$/;"	f	file:
assign	toIR.c	/^static void assign ( IRTemp dst, IRExpr* e )$/;"	f	file:
binop	ghelpers.c	1290;"	d	file:
binop	ghelpers.c	790;"	d	file:
binop	toIR.c	/^static IRExpr* binop ( IROp op, IRExpr* a1, IRExpr* a2 )$/;"	f	file:
breakup128to32s	toIR.c	/^static void breakup128to32s ( IRTemp t128,$/;"	f	file:
breakup64to16s	toIR.c	/^static void breakup64to16s ( IRTemp t64,$/;"	f	file:
calc_parity_8bit	ghelpers.c	/^static UInt calc_parity_8bit ( UInt w32 ) {$/;"	f	file:
can_be_used_with_LOCK_prefix	toIR.c	/^static Bool can_be_used_with_LOCK_prefix ( UChar* opc )$/;"	f	file:
clear_C2	toIR.c	/^static void clear_C2 ( void )$/;"	f	file:
codegen_LAHF	toIR.c	/^void codegen_LAHF ( void  )$/;"	f	file:
codegen_SAHF	toIR.c	/^void codegen_SAHF ( void )$/;"	f	file:
codegen_div	toIR.c	/^void codegen_div ( Int sz, IRTemp t, Bool signed_divide )$/;"	f	file:
codegen_mulL_A_D	toIR.c	/^static void codegen_mulL_A_D ( Int sz, Bool syned, $/;"	f	file:
codegen_xchg_eAX_Reg	toIR.c	/^void codegen_xchg_eAX_Reg ( Int sz, Int reg )$/;"	f	file:
disAMode	toIR.c	/^IRTemp disAMode ( Int* len, UChar sorb, Int delta, HChar* buf )$/;"	f	file:
disAMode_copy2tmp	toIR.c	/^static IRTemp disAMode_copy2tmp ( IRExpr* addr32 )$/;"	f	file:
disInstr_X86	toIR.c	/^DisResult disInstr_X86 ( IRSB*        irsb_IN,$/;"	f
disInstr_X86_WRK	toIR.c	/^DisResult disInstr_X86_WRK ( $/;"	f	file:
dis_CMPS	toIR.c	/^void dis_CMPS ( Int sz, IRTemp t_inc )$/;"	f	file:
dis_FPU	toIR.c	/^UInt dis_FPU ( Bool* decode_ok, UChar sorb, Int delta )$/;"	f	file:
dis_Grp1	toIR.c	/^UInt dis_Grp1 ( UChar sorb,$/;"	f	file:
dis_Grp2	toIR.c	/^UInt dis_Grp2 ( UChar sorb,$/;"	f	file:
dis_Grp3	toIR.c	/^UInt dis_Grp3 ( UChar sorb, Int sz, Int delta, Bool* decode_OK )$/;"	f	file:
dis_Grp4	toIR.c	/^UInt dis_Grp4 ( UChar sorb, Int delta, Bool* decode_OK )$/;"	f	file:
dis_Grp5	toIR.c	/^UInt dis_Grp5 ( UChar sorb, Int sz, Int delta, $/;"	f	file:
dis_Grp8_Imm	toIR.c	/^UInt dis_Grp8_Imm ( UChar sorb,$/;"	f	file:
dis_LODS	toIR.c	/^void dis_LODS ( Int sz, IRTemp t_inc )$/;"	f	file:
dis_MMX	toIR.c	/^UInt dis_MMX ( Bool* decode_ok, UChar sorb, Int sz, Int delta )$/;"	f	file:
dis_MMX_shiftE_imm	toIR.c	/^UInt dis_MMX_shiftE_imm ( Int delta, HChar* opname, IROp op )$/;"	f	file:
dis_MMX_shiftG_byE	toIR.c	/^static UInt dis_MMX_shiftG_byE ( UChar sorb, Int delta, $/;"	f	file:
dis_MMXop_regmem_to_reg	toIR.c	/^UInt dis_MMXop_regmem_to_reg ( UChar  sorb,$/;"	f	file:
dis_MOVS	toIR.c	/^void dis_MOVS ( Int sz, IRTemp t_inc )$/;"	f	file:
dis_REP_op	toIR.c	/^void dis_REP_op ( X86Condcode cond,$/;"	f	file:
dis_SCAS	toIR.c	/^void dis_SCAS ( Int sz, IRTemp t_inc )$/;"	f	file:
dis_SHLRD_Gv_Ev	toIR.c	/^UInt dis_SHLRD_Gv_Ev ( UChar sorb,$/;"	f	file:
dis_SSE_E_to_G_all	toIR.c	/^UInt dis_SSE_E_to_G_all ( UChar sorb, Int delta, HChar* opname, IROp op )$/;"	f	file:
dis_SSE_E_to_G_all_invG	toIR.c	/^UInt dis_SSE_E_to_G_all_invG ( UChar sorb, Int delta, $/;"	f	file:
dis_SSE_E_to_G_all_wrk	toIR.c	/^static UInt dis_SSE_E_to_G_all_wrk ( $/;"	f	file:
dis_SSE_E_to_G_lo32	toIR.c	/^static UInt dis_SSE_E_to_G_lo32 ( UChar sorb, Int delta, $/;"	f	file:
dis_SSE_E_to_G_lo64	toIR.c	/^static UInt dis_SSE_E_to_G_lo64 ( UChar sorb, Int delta, $/;"	f	file:
dis_SSE_E_to_G_unary_all	toIR.c	/^static UInt dis_SSE_E_to_G_unary_all ( $/;"	f	file:
dis_SSE_E_to_G_unary_lo32	toIR.c	/^static UInt dis_SSE_E_to_G_unary_lo32 ( $/;"	f	file:
dis_SSE_E_to_G_unary_lo64	toIR.c	/^static UInt dis_SSE_E_to_G_unary_lo64 ( $/;"	f	file:
dis_SSE_shiftE_imm	toIR.c	/^UInt dis_SSE_shiftE_imm ( Int delta, HChar* opname, IROp op )$/;"	f	file:
dis_SSE_shiftG_byE	toIR.c	/^static UInt dis_SSE_shiftG_byE ( UChar sorb, Int delta, $/;"	f	file:
dis_SSEcmp_E_to_G	toIR.c	/^static UInt dis_SSEcmp_E_to_G ( UChar sorb, Int delta, $/;"	f	file:
dis_SSEint_E_to_G	toIR.c	/^static UInt dis_SSEint_E_to_G( $/;"	f	file:
dis_STOS	toIR.c	/^void dis_STOS ( Int sz, IRTemp t_inc )$/;"	f	file:
dis_bs_E_G	toIR.c	/^UInt dis_bs_E_G ( UChar sorb, Int sz, Int delta, Bool fwds )$/;"	f	file:
dis_bt_G_E	toIR.c	/^UInt dis_bt_G_E ( UChar sorb, Int sz, Int delta, BtOp op )$/;"	f	file:
dis_cmov_E_G	toIR.c	/^UInt dis_cmov_E_G ( UChar       sorb,$/;"	f	file:
dis_cmpxchg_G_E	toIR.c	/^UInt dis_cmpxchg_G_E ( UChar       sorb,$/;"	f	file:
dis_imul_I_E_G	toIR.c	/^UInt dis_imul_I_E_G ( UChar       sorb,$/;"	f	file:
dis_mov_E_G	toIR.c	/^UInt dis_mov_E_G ( UChar       sorb,$/;"	f	file:
dis_mov_Ew_Sw	toIR.c	/^UInt dis_mov_Ew_Sw ( UChar sorb, Int delta0 )$/;"	f	file:
dis_mov_G_E	toIR.c	/^UInt dis_mov_G_E ( UChar       sorb,$/;"	f	file:
dis_mov_Sw_Ew	toIR.c	/^UInt dis_mov_Sw_Ew ( UChar sorb,$/;"	f	file:
dis_movx_E_G	toIR.c	/^UInt dis_movx_E_G ( UChar      sorb,$/;"	f	file:
dis_mul_E_G	toIR.c	/^UInt dis_mul_E_G ( UChar       sorb,$/;"	f	file:
dis_op2_E_G	toIR.c	/^UInt dis_op2_E_G ( UChar       sorb,$/;"	f	file:
dis_op2_G_E	toIR.c	/^UInt dis_op2_G_E ( UChar       sorb,$/;"	f	file:
dis_op_imm_A	toIR.c	/^UInt dis_op_imm_A ( Int    size,$/;"	f	file:
dis_pop_segreg	toIR.c	/^void dis_pop_segreg ( UInt sreg, Int sz )$/;"	f	file:
dis_push_segreg	toIR.c	/^void dis_push_segreg ( UInt sreg, Int sz )$/;"	f	file:
dis_ret	toIR.c	/^void dis_ret ( UInt d32 )$/;"	f	file:
dis_string_op	toIR.c	/^void dis_string_op( void (*dis_OP)( Int, IRTemp ), $/;"	f	file:
dis_string_op_increment	toIR.c	/^void dis_string_op_increment(Int sz, Int t_inc)$/;"	f	file:
dis_xadd_G_E	toIR.c	/^UInt dis_xadd_G_E ( UChar sorb, Int sz, Int delta0, Bool* decodeOK )$/;"	f	file:
do_EMMS_preamble	toIR.c	/^static void do_EMMS_preamble ( void )$/;"	f	file:
do_MMX_preamble	toIR.c	/^static void do_MMX_preamble ( void )$/;"	f	file:
do_get_x87	ghelpers.c	/^void do_get_x87 ( \/*IN*\/VexGuestX86State* vex_state,$/;"	f	file:
do_put_x87	ghelpers.c	/^VexEmWarn do_put_x87 ( Bool moveRegs,$/;"	f	file:
epartIsReg	toIR.c	/^static Bool epartIsReg ( UChar mod_reg_rm )$/;"	f	file:
eregOfRM	toIR.c	/^static Int eregOfRM ( UChar mod_reg_rm )$/;"	f	file:
extend_s_16to32	toIR.c	/^static UInt extend_s_16to32 ( UInt x )$/;"	f	file:
extend_s_8to32	toIR.c	/^static UInt extend_s_8to32( UInt x )$/;"	f	file:
findSSECmpOp	toIR.c	/^static void findSSECmpOp ( Bool* needNot, IROp* op, $/;"	f	file:
fp_do_op_ST_ST	toIR.c	/^void fp_do_op_ST_ST ( HChar* op_txt, IROp op, UInt st_src, UInt st_dst,$/;"	f	file:
fp_do_op_mem_ST_0	toIR.c	/^void fp_do_op_mem_ST_0 ( IRTemp addr, HChar* op_txt, HChar* dis_buf, $/;"	f	file:
fp_do_oprev_ST_ST	toIR.c	/^void fp_do_oprev_ST_ST ( HChar* op_txt, IROp op, UInt st_src, UInt st_dst,$/;"	f	file:
fp_do_oprev_mem_ST_0	toIR.c	/^void fp_do_oprev_mem_ST_0 ( IRTemp addr, HChar* op_txt, HChar* dis_buf, $/;"	f	file:
fp_do_ucomi_ST0_STi	toIR.c	/^static void fp_do_ucomi_ST0_STi ( UInt i, Bool pop_after )$/;"	f	file:
fp_pop	toIR.c	/^static void fp_pop ( void )$/;"	f	file:
fp_push	toIR.c	/^static void fp_push ( void )$/;"	f	file:
getIByte	toIR.c	/^static UChar getIByte ( Int delta )$/;"	f	file:
getIReg	toIR.c	/^static IRExpr* getIReg ( Int sz, UInt archreg )$/;"	f	file:
getMMXReg	toIR.c	/^static IRExpr* getMMXReg ( UInt archreg )$/;"	f	file:
getSDisp	toIR.c	/^static UInt getSDisp ( Int size, Int delta )$/;"	f	file:
getSDisp16	toIR.c	/^static UInt getSDisp16 ( Int delta0 )$/;"	f	file:
getSDisp8	toIR.c	/^static UInt getSDisp8 ( Int delta )$/;"	f	file:
getSReg	toIR.c	/^static IRExpr* getSReg ( UInt sreg )$/;"	f	file:
getUChar	toIR.c	/^static UChar getUChar ( Int delta )$/;"	f	file:
getUDisp	toIR.c	/^static UInt getUDisp ( Int size, Int delta )$/;"	f	file:
getUDisp16	toIR.c	/^static UInt getUDisp16 ( Int delta )$/;"	f	file:
getUDisp32	toIR.c	/^static UInt getUDisp32 ( Int delta )$/;"	f	file:
getXMMReg	toIR.c	/^static IRExpr* getXMMReg ( UInt xmmreg )$/;"	f	file:
getXMMRegLane32	toIR.c	/^static IRExpr* getXMMRegLane32 ( UInt xmmreg, Int laneno )$/;"	f	file:
getXMMRegLane32F	toIR.c	/^static IRExpr* getXMMRegLane32F ( UInt xmmreg, Int laneno )$/;"	f	file:
getXMMRegLane64	toIR.c	/^static IRExpr* getXMMRegLane64 ( UInt xmmreg, Int laneno )$/;"	f	file:
getXMMRegLane64F	toIR.c	/^static IRExpr* getXMMRegLane64F ( UInt xmmreg, Int laneno )$/;"	f	file:
get_C3210	toIR.c	/^static IRExpr* get_C3210 ( void )$/;"	f	file:
get_FAKE_roundingmode	toIR.c	/^static IRExpr* \/* :: Ity_I32 *\/ get_FAKE_roundingmode ( void )$/;"	f	file:
get_FPU_sw	toIR.c	/^static IRExpr* get_FPU_sw ( void )$/;"	f	file:
get_ST	toIR.c	/^static IRExpr* get_ST ( Int i )$/;"	f	file:
get_ST_TAG	toIR.c	/^static IRExpr* get_ST_TAG ( Int i )$/;"	f	file:
get_ST_UNCHECKED	toIR.c	/^static IRExpr* get_ST_UNCHECKED ( Int i )$/;"	f	file:
get_fpround	toIR.c	/^static IRExpr* \/* :: Ity_I32 *\/ get_fpround ( void )$/;"	f	file:
get_ftop	toIR.c	/^static IRExpr* get_ftop ( void )$/;"	f	file:
get_roundingmode	toIR.c	/^static IRExpr* \/* :: Ity_I32 *\/ get_roundingmode ( void )$/;"	f	file:
get_segdescr_base	ghelpers.c	/^UInt get_segdescr_base ( VexGuestX86SegDescr* ent )$/;"	f	file:
get_segdescr_limit	ghelpers.c	/^UInt get_segdescr_limit ( VexGuestX86SegDescr* ent )$/;"	f	file:
get_sse_roundingmode	toIR.c	/^static IRExpr* \/* :: Ity_I32 *\/ get_sse_roundingmode ( void )$/;"	f	file:
gregOfRM	toIR.c	/^static Int gregOfRM ( UChar mod_reg_rm )$/;"	f	file:
guest_EIP_bbstart	toIR.c	/^static Addr32 guest_EIP_bbstart;$/;"	v	file:
guest_EIP_curr_instr	toIR.c	/^static Addr32 guest_EIP_curr_instr;$/;"	v	file:
guest_code	toIR.c	/^static UChar* guest_code;$/;"	v	file:
guest_x86_spechelper	ghelpers.c	/^IRExpr* guest_x86_spechelper ( HChar* function_name,$/;"	f
guest_x86_state_requires_precise_mem_exns	ghelpers.c	/^Bool guest_x86_state_requires_precise_mem_exns ( Int minoff, $/;"	f
handleSegOverride	toIR.c	/^IRExpr* handleSegOverride ( UChar sorb, IRExpr* virtual )$/;"	f	file:
helper_ADC	toIR.c	/^static void helper_ADC ( Int sz,$/;"	f	file:
helper_SBB	toIR.c	/^static void helper_SBB ( Int sz,$/;"	f	file:
host_is_bigendian	toIR.c	/^static Bool host_is_bigendian;$/;"	v	file:
host_is_little_endian	ghelpers.c	/^static inline Bool host_is_little_endian ( void )$/;"	f	file:
idULong	ghelpers.c	/^static inline ULong idULong ( ULong x )$/;"	f	file:
initCounts	ghelpers.c	/^static void initCounts ( void )$/;"	f	file:
initted	ghelpers.c	/^static Bool initted     = False;$/;"	v	file:
integerGuestRegOffset	toIR.c	/^static Int integerGuestRegOffset ( Int sz, UInt archreg )$/;"	f	file:
irsb	toIR.c	/^static IRSB* irsb;$/;"	v	file:
isAddSub	toIR.c	/^static Bool isAddSub ( IROp op8 )$/;"	f	file:
isLogic	toIR.c	/^static Bool isLogic ( IROp op8 )$/;"	f	file:
isU32	ghelpers.c	/^static inline Bool isU32 ( IRExpr* e, UInt n )$/;"	f	file:
jcc_01	toIR.c	/^void jcc_01( X86Condcode cond, Addr32 d32_false, Addr32 d32_true )$/;"	f	file:
jmp_lit	toIR.c	/^static void jmp_lit( IRJumpKind kind, Addr32 d32 )$/;"	f	file:
jmp_treg	toIR.c	/^static void jmp_treg( IRJumpKind kind, IRTemp t )$/;"	f	file:
lengthAMode	toIR.c	/^static UInt lengthAMode ( Int delta )$/;"	f	file:
loadLE	toIR.c	/^static IRExpr* loadLE ( IRType ty, IRExpr* data )$/;"	f	file:
lshift	ghelpers.c	/^inline static Int lshift ( Int x, Int n )$/;"	f	file:
mk128from32s	toIR.c	/^static IRExpr* mk128from32s ( IRTemp t3, IRTemp t2,$/;"	f	file:
mk32x2	ghelpers.c	/^static inline ULong mk32x2 ( UInt w1, UInt w0 ) {$/;"	f	file:
mk64from16s	toIR.c	/^static IRExpr* mk64from16s ( IRTemp t3, IRTemp t2,$/;"	f	file:
mkAnd1	toIR.c	/^static IRExpr* mkAnd1 ( IRExpr* x, IRExpr* y )$/;"	f	file:
mkQNaN64	toIR.c	/^static IRExpr* mkQNaN64 ( void )$/;"	f	file:
mkSizedOp	toIR.c	/^static IROp mkSizedOp ( IRType ty, IROp op8 )$/;"	f	file:
mkU	toIR.c	/^static IRExpr* mkU ( IRType ty, UInt i )$/;"	f	file:
mkU16	toIR.c	/^static IRExpr* mkU16 ( UInt i )$/;"	f	file:
mkU32	ghelpers.c	1291;"	d	file:
mkU32	ghelpers.c	791;"	d	file:
mkU32	toIR.c	/^static IRExpr* mkU32 ( UInt i )$/;"	f	file:
mkU64	toIR.c	/^static IRExpr* mkU64 ( ULong i )$/;"	f	file:
mkU8	ghelpers.c	1292;"	d	file:
mkU8	ghelpers.c	792;"	d	file:
mkU8	toIR.c	/^static IRExpr* mkU8 ( UInt i )$/;"	f	file:
mkV128	toIR.c	/^static IRExpr* mkV128 ( UShort mask )$/;"	f	file:
mkWidenOp	toIR.c	/^static IROp mkWidenOp ( Int szSmall, Int szBig, Bool signd )$/;"	f	file:
mk_x86g_calculate_condition	toIR.c	/^static IRExpr* mk_x86g_calculate_condition ( X86Condcode cond )$/;"	f	file:
mk_x86g_calculate_eflags_all	toIR.c	/^static IRExpr* mk_x86g_calculate_eflags_all ( void )$/;"	f	file:
mk_x86g_calculate_eflags_c	toIR.c	/^static IRExpr* mk_x86g_calculate_eflags_c ( void )$/;"	f	file:
mkexpr	toIR.c	/^static IRExpr* mkexpr ( IRTemp tmp )$/;"	f	file:
n_calc_all	ghelpers.c	/^static UInt n_calc_all  = 0;$/;"	v	file:
n_calc_c	ghelpers.c	/^static UInt n_calc_c    = 0;$/;"	v	file:
n_calc_cond	ghelpers.c	/^static UInt n_calc_cond = 0;$/;"	v	file:
nameBtOp	toIR.c	/^static HChar* nameBtOp ( BtOp op )$/;"	f	file:
nameGrp1	toIR.c	/^static HChar* nameGrp1 ( Int opc_aux )$/;"	f	file:
nameGrp2	toIR.c	/^static HChar* nameGrp2 ( Int opc_aux )$/;"	f	file:
nameGrp4	toIR.c	/^static HChar* nameGrp4 ( Int opc_aux )$/;"	f	file:
nameGrp5	toIR.c	/^static HChar* nameGrp5 ( Int opc_aux )$/;"	f	file:
nameGrp8	toIR.c	/^static HChar* nameGrp8 ( Int opc_aux )$/;"	f	file:
nameIReg	toIR.c	/^static HChar* nameIReg ( Int size, Int reg )$/;"	f	file:
nameISize	toIR.c	/^static HChar nameISize ( Int size )$/;"	f	file:
nameMMXGran	toIR.c	/^static HChar* nameMMXGran ( Int gran )$/;"	f	file:
nameMMXReg	toIR.c	/^static HChar* nameMMXReg ( Int mmxreg )$/;"	f	file:
nameSReg	toIR.c	/^static HChar* nameSReg ( UInt sreg )$/;"	f	file:
nameXMMReg	toIR.c	/^static HChar* nameXMMReg ( Int xmmreg )$/;"	f	file:
name_X86Condcode	toIR.c	/^static HChar* name_X86Condcode ( X86Condcode cond )$/;"	f	file:
narrowTo	toIR.c	/^static IRExpr* narrowTo ( IRType dst_ty, IRExpr* e )$/;"	f	file:
newTemp	toIR.c	/^static IRTemp newTemp ( IRType ty )$/;"	f	file:
parity_table	ghelpers.c	/^static const UChar parity_table[256] = {$/;"	v	file:
positiveIse_X86Condcode	toIR.c	/^X86Condcode positiveIse_X86Condcode ( X86Condcode  cond,$/;"	f	file:
putIReg	toIR.c	/^static void putIReg ( Int sz, UInt archreg, IRExpr* e )$/;"	f	file:
putMMXReg	toIR.c	/^static void putMMXReg ( UInt archreg, IRExpr* e )$/;"	f	file:
putSReg	toIR.c	/^static void putSReg ( UInt sreg, IRExpr* e )$/;"	f	file:
putXMMReg	toIR.c	/^static void putXMMReg ( UInt xmmreg, IRExpr* e )$/;"	f	file:
putXMMRegLane16	toIR.c	/^static void putXMMRegLane16 ( UInt xmmreg, Int laneno, IRExpr* e )$/;"	f	file:
putXMMRegLane32	toIR.c	/^static void putXMMRegLane32 ( UInt xmmreg, Int laneno, IRExpr* e )$/;"	f	file:
putXMMRegLane32F	toIR.c	/^static void putXMMRegLane32F ( UInt xmmreg, Int laneno, IRExpr* e )$/;"	f	file:
putXMMRegLane64	toIR.c	/^static void putXMMRegLane64 ( UInt xmmreg, Int laneno, IRExpr* e )$/;"	f	file:
putXMMRegLane64F	toIR.c	/^static void putXMMRegLane64F ( UInt xmmreg, Int laneno, IRExpr* e )$/;"	f	file:
put_C3210	toIR.c	/^static void put_C3210 ( IRExpr* e )$/;"	f	file:
put_ST	toIR.c	/^static void put_ST ( Int i, IRExpr* value )$/;"	f	file:
put_ST_TAG	toIR.c	/^static void put_ST_TAG ( Int i, IRExpr* value )$/;"	f	file:
put_ST_UNCHECKED	toIR.c	/^static void put_ST_UNCHECKED ( Int i, IRExpr* value )$/;"	f	file:
put_emwarn	toIR.c	/^static void put_emwarn ( IRExpr* e \/* :: Ity_I32 *\/ )$/;"	f	file:
put_fpround	toIR.c	/^static void put_fpround ( IRExpr* \/* :: Ity_I32 *\/ e )$/;"	f	file:
put_ftop	toIR.c	/^static void put_ftop ( IRExpr* e )$/;"	f	file:
put_sse_roundingmode	toIR.c	/^static void put_sse_roundingmode ( IRExpr* sseround )$/;"	f	file:
segmentGuestRegOffset	toIR.c	/^static Int segmentGuestRegOffset ( UInt sreg )$/;"	f	file:
sel16x4_0	ghelpers.c	/^static inline UShort sel16x4_0 ( ULong w64 ) {$/;"	f	file:
sel16x4_1	ghelpers.c	/^static inline UShort sel16x4_1 ( ULong w64 ) {$/;"	f	file:
sel16x4_2	ghelpers.c	/^static inline UShort sel16x4_2 ( ULong w64 ) {$/;"	f	file:
sel16x4_3	ghelpers.c	/^static inline UShort sel16x4_3 ( ULong w64 ) {$/;"	f	file:
sel8x8_0	ghelpers.c	/^static inline UChar sel8x8_0 ( ULong w64 ) {$/;"	f	file:
sel8x8_1	ghelpers.c	/^static inline UChar sel8x8_1 ( ULong w64 ) {$/;"	f	file:
sel8x8_2	ghelpers.c	/^static inline UChar sel8x8_2 ( ULong w64 ) {$/;"	f	file:
sel8x8_3	ghelpers.c	/^static inline UChar sel8x8_3 ( ULong w64 ) {$/;"	f	file:
sel8x8_4	ghelpers.c	/^static inline UChar sel8x8_4 ( ULong w64 ) {$/;"	f	file:
sel8x8_5	ghelpers.c	/^static inline UChar sel8x8_5 ( ULong w64 ) {$/;"	f	file:
sel8x8_6	ghelpers.c	/^static inline UChar sel8x8_6 ( ULong w64 ) {$/;"	f	file:
sel8x8_7	ghelpers.c	/^static inline UChar sel8x8_7 ( ULong w64 ) {$/;"	f	file:
setFlags_DEP1	toIR.c	/^void setFlags_DEP1 ( IROp op8, IRTemp dep1, IRType ty )$/;"	f	file:
setFlags_DEP1_DEP2	toIR.c	/^void setFlags_DEP1_DEP2 ( IROp op8, IRTemp dep1, IRTemp dep2, IRType ty )$/;"	f	file:
setFlags_DEP1_DEP2_shift	toIR.c	/^static void setFlags_DEP1_DEP2_shift ( IROp    op32,$/;"	f	file:
setFlags_INC_DEC	toIR.c	/^static void setFlags_INC_DEC ( Bool inc, IRTemp res, IRType ty )$/;"	f	file:
setFlags_MUL	toIR.c	/^void setFlags_MUL ( IRType ty, IRTemp arg1, IRTemp arg2, UInt base_op )$/;"	f	file:
showCounts	ghelpers.c	/^static void showCounts ( void )$/;"	f	file:
sorbTxt	toIR.c	/^HChar* sorbTxt ( UChar sorb )$/;"	f	file:
stmt	toIR.c	/^static void stmt ( IRStmt* st )$/;"	f	file:
storeLE	toIR.c	/^static void storeLE ( IRExpr* addr, IRExpr* data )$/;"	f	file:
szToITy	toIR.c	/^static IRType szToITy ( Int n )$/;"	f	file:
tab_cond	ghelpers.c	/^static UInt tab_cond[X86G_CC_OP_NUMBER][16];$/;"	v	file:
tabc_fast	ghelpers.c	/^static UInt tabc_fast[X86G_CC_OP_NUMBER];$/;"	v	file:
tabc_slow	ghelpers.c	/^static UInt tabc_slow[X86G_CC_OP_NUMBER];$/;"	v	file:
triop	toIR.c	/^static IRExpr* triop ( IROp op, IRExpr* a1, IRExpr* a2, IRExpr* a3 )$/;"	f	file:
unop	ghelpers.c	1289;"	d	file:
unop	ghelpers.c	789;"	d	file:
unop	toIR.c	/^static IRExpr* unop ( IROp op, IRExpr* a )$/;"	f	file:
widenSto32	toIR.c	/^static IRExpr* widenSto32 ( IRExpr* e )$/;"	f	file:
widenUto32	toIR.c	/^static IRExpr* widenUto32 ( IRExpr* e )$/;"	f	file:
x86g_calculate_FXAM	ghelpers.c	/^UInt x86g_calculate_FXAM ( UInt tag, ULong dbl ) $/;"	f
x86g_calculate_RCL	ghelpers.c	/^ULong x86g_calculate_RCL ( UInt arg, UInt rot_amt, UInt eflags_in, UInt sz )$/;"	f
x86g_calculate_RCR	ghelpers.c	/^ULong x86g_calculate_RCR ( UInt arg, UInt rot_amt, UInt eflags_in, UInt sz )$/;"	f
x86g_calculate_condition	ghelpers.c	/^UInt x86g_calculate_condition ( UInt\/*X86Condcode*\/ cond, $/;"	f
x86g_calculate_daa_das_aaa_aas	ghelpers.c	/^UInt x86g_calculate_daa_das_aaa_aas ( UInt flags_and_AX, UInt opcode )$/;"	f
x86g_calculate_eflags_all	ghelpers.c	/^UInt x86g_calculate_eflags_all ( UInt cc_op, $/;"	f
x86g_calculate_eflags_all_WRK	ghelpers.c	/^UInt x86g_calculate_eflags_all_WRK ( UInt cc_op, $/;"	f	file:
x86g_calculate_eflags_c	ghelpers.c	/^UInt x86g_calculate_eflags_c ( UInt cc_op, $/;"	f
x86g_calculate_mmx_pmaddwd	ghelpers.c	/^ULong x86g_calculate_mmx_pmaddwd ( ULong xx, ULong yy )$/;"	f
x86g_calculate_mmx_pmovmskb	ghelpers.c	/^UInt x86g_calculate_mmx_pmovmskb ( ULong xx )$/;"	f
x86g_calculate_mmx_psadbw	ghelpers.c	/^ULong x86g_calculate_mmx_psadbw ( ULong xx, ULong yy )$/;"	f
x86g_calculate_sse_pmovmskb	ghelpers.c	/^UInt x86g_calculate_sse_pmovmskb ( ULong w64hi, ULong w64lo )$/;"	f
x86g_check_fldcw	ghelpers.c	/^ULong x86g_check_fldcw ( UInt fpucw )$/;"	f
x86g_check_ldmxcsr	ghelpers.c	/^ULong x86g_check_ldmxcsr ( UInt mxcsr )$/;"	f
x86g_create_fpucw	ghelpers.c	/^UInt x86g_create_fpucw ( UInt fpround )$/;"	f
x86g_create_mxcsr	ghelpers.c	/^UInt x86g_create_mxcsr ( UInt sseround )$/;"	f
x86g_dirtyhelper_CPUID_sse0	ghelpers.c	/^void x86g_dirtyhelper_CPUID_sse0 ( VexGuestX86State* st )$/;"	f
x86g_dirtyhelper_CPUID_sse1	ghelpers.c	/^void x86g_dirtyhelper_CPUID_sse1 ( VexGuestX86State* st )$/;"	f
x86g_dirtyhelper_CPUID_sse2	ghelpers.c	/^void x86g_dirtyhelper_CPUID_sse2 ( VexGuestX86State* st )$/;"	f
x86g_dirtyhelper_FINIT	ghelpers.c	/^void x86g_dirtyhelper_FINIT ( VexGuestX86State* gst )$/;"	f
x86g_dirtyhelper_FLDENV	ghelpers.c	/^VexEmWarn x86g_dirtyhelper_FLDENV ( VexGuestX86State* gst, HWord addr )$/;"	f
x86g_dirtyhelper_FRSTOR	ghelpers.c	/^VexEmWarn x86g_dirtyhelper_FRSTOR ( VexGuestX86State* gst, HWord addr )$/;"	f
x86g_dirtyhelper_FSAVE	ghelpers.c	/^void x86g_dirtyhelper_FSAVE ( VexGuestX86State* gst, HWord addr )$/;"	f
x86g_dirtyhelper_FSTENV	ghelpers.c	/^void x86g_dirtyhelper_FSTENV ( VexGuestX86State* gst, HWord addr )$/;"	f
x86g_dirtyhelper_FXSAVE	ghelpers.c	/^void x86g_dirtyhelper_FXSAVE ( VexGuestX86State* gst, HWord addr )$/;"	f
x86g_dirtyhelper_IN	ghelpers.c	/^UInt x86g_dirtyhelper_IN ( UInt portno, UInt sz\/*1,2 or 4*\/ )$/;"	f
x86g_dirtyhelper_OUT	ghelpers.c	/^void x86g_dirtyhelper_OUT ( UInt portno, UInt data, UInt sz\/*1,2 or 4*\/ )$/;"	f
x86g_dirtyhelper_RDTSC	ghelpers.c	/^ULong x86g_dirtyhelper_RDTSC ( void )$/;"	f
x86g_dirtyhelper_loadF80le	ghelpers.c	/^ULong x86g_dirtyhelper_loadF80le ( UInt addrU )$/;"	f
x86g_dirtyhelper_storeF80le	ghelpers.c	/^void x86g_dirtyhelper_storeF80le ( UInt addrU, ULong f64 )$/;"	f
x86g_use_seg_selector	ghelpers.c	/^ULong x86g_use_seg_selector ( HWord ldt, HWord gdt,$/;"	f
x86guest_layout	ghelpers.c	/^   x86guest_layout $/;"	v
xmmGuestRegLane16offset	toIR.c	/^static Int xmmGuestRegLane16offset ( UInt xmmreg, Int laneno )$/;"	f	file:
xmmGuestRegLane32offset	toIR.c	/^static Int xmmGuestRegLane32offset ( UInt xmmreg, Int laneno )$/;"	f	file:
xmmGuestRegLane64offset	toIR.c	/^static Int xmmGuestRegLane64offset ( UInt xmmreg, Int laneno )$/;"	f	file:
xmmGuestRegOffset	toIR.c	/^static Int xmmGuestRegOffset ( UInt xmmreg )$/;"	f	file:
