#!/usr/bin/env python
#
# Copyright (c) 2005 Regents of the University of California.
# All rights reserved.

# Redistribution and use in source and binary forms, with or
# without modification, are permitted provided that the following
# conditions are met:
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above
#    copyright notice, this list of conditions and the following
#    disclaimer in the documentation and/or other materials
#    provided with the distribution.
# 3. Neither the name of the University nor the names of its
#    contributors may be used to endorse or promote products
#    derived from this software without specific prior written
#    permission.

# THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS
# IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
# FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE
# REGENTS OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
# INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
# OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
# WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
# NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
# THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
# author: Dennis Geels
#
# $Id: liblog,v 1.23 2006/06/15 23:03:38 geels Exp $

"""liblog: startup script for liblog project

This script:
	1) Reads the local configuration file
	2) Sets required environment variables
	3) Starts the logger process if necessary
	4) Exec's the target application.

"""

import sys, os, ConfigParser, time, signal, socket, re

def usage():
    print( "USAGE: %s <application> <application arguments>"%sys.argv[0] )

if len(sys.argv) < 2:
    usage()
    sys.exit(-2)


########################################
# Filenames (relative to ./run)
config_filename = "liblog.cfg"
logger_bin = "../logger/logger.py"	# Not actually the binary
logger_shm_entries = "1"		# Need one entry per app
logger_out = os.path.dirname(logger_bin)+"/logger.out"
liblog_lib_path = "../libs"
liblog_file = "liblog.so.0"
my_name = os.path.basename(sys.argv[0])
run_dir = os.path.dirname(sys.argv[0])+"/run/"

def call_as_daemon( cmd_list, output_filename ):
    """Forks off a daemon that exec's a command.

    Uses standard double-fork method."""
    print "%s: starting '%s'"%(my_name," ".join(cmd_list))
    sys.stdout.flush()
    sys.stderr.flush()
    pid = os.fork()
    if pid > 0:
        os.waitpid( pid, 0 )
        return	# Parent returns to rest of script.
    else:	# Child thread.
        sys.stdin.close()
        os.setsid()
        signal.signal(signal.SIGHUP,signal.SIG_IGN)
        pid = os.fork()
        if pid > 0: os._exit(0)	# Discard first child
        else:	# Second child is now a daemon.
            try:		# Redirect all output to log.
                output_file = file( output_filename, "a" )
                os.dup2( output_file.fileno(), sys.stdout.fileno() )
                os.dup2( output_file.fileno(), sys.stderr.fileno() )
            except IOError, e:
                print >>sys.__stderr__, e
                sys.exit( "Could not open log file\n" )
            # Finall, exec command.
            os.execv( cmd_list[0], cmd_list )
    raise Exception, "Should never reach this line"

def query_logger( query_port ):
    "Sends an uptime query to the local logger."
    sock = socket.socket()
    sock.settimeout( 5 )
    sock.connect( ("localhost",query_port) )
    sock.sendall( "Liblog uptime query" )
    uptime_str = sock.recv( 32 )
    sock.close()
    match = re.match( "Liblog uptime resp: (\d+)", uptime_str )
    if match:
        return int(match.group(1))
    else:
        return -1

#### Manipulate PWD to make relative pathnames work.
# We start the application from a local subdirectory ("run"), so that
#  our libraries can be found with a simple relative path ("../libs").
# This simplifies GDB execution during replay.
environment = os.environ
app_filename = sys.argv[1]
if app_filename.find("/") > 0:	# relative path
    app_filename = os.path.abspath(app_filename)
# else: absolute path, or no path (just executable name).

# Move into run/ directory for runtime
os.chdir(run_dir)

#### Read config files and initialize environment:
config_parser = ConfigParser.SafeConfigParser()
config_parser.read(config_filename)
config_vars = dict(config_parser.items("liblog"))
environment["LOGGER_DIR"] = os.path.abspath(config_vars["log_dir"])
environment["LOGGER_PORT"] = config_vars["logger_port"]
environment["LOGGER_ROTATE_PERIOD_US"] = config_vars["ckpt_period"]
environment["LD_LIBRARY_PATH"] = (liblog_lib_path+":"+
                                  environment.get("LD_LIBRARY_PATH",""))
# Allows liblog to override weak symbols in libc (e.g., fopen64()).
environment["LD_DYNAMIC_WEAK"] = "1"

##### Now make sure the logger is running:
logger_rpc_port = int(config_vars["logger_port"])-1	# For now
# Convert these to absolute paths, but only for output clarity:
logger_bin = os.path.abspath(os.path.expanduser(logger_bin))
logger_out = os.path.abspath(os.path.expanduser(logger_out))

num_tries = 64
for try_i in range( num_tries ):	# Give it a few tries.
    try:
        uptime = query_logger( logger_rpc_port )
        if uptime < 0:
            sys.exit( "%s: Could not open logger port\n"%my_name )
        # else:
        print "%s: Logger running (up %ds)"%\
              (my_name,uptime)
        break	# Everything is ready.
    except socket.error, e:
        if isinstance( e.args, tuple ):
            e_errno, e_str = e.args
            import errno
            if errno.ECONNREFUSED == e_errno:
                # This error is expected if no logger is running yet.
                if try_i+1 < num_tries:	# Try again.
                    call_as_daemon( [logger_bin,config_vars["logger_port"],logger_shm_entries], logger_out )
                    time.sleep(1+try_i)	# Give the logger a second, then try again.
            else: raise e	# Not ECONNREFUSED
        else: raise e	# Only a string socket.error
else:	# If all tries failed:
    sys.exit( "Cannot find or start logger\n" )

##### Now execute the target application.
print "%s: Executing %s\n"%(my_name," ".join(sys.argv[1:]))
environment["LD_PRELOAD"] = liblog_file
try:
    # If are are invoked from within another script, then
	 # we will inherit that script's group id. This will result
	 # in log files and checkpoints that look like they all
	 # belong in the same family. But this is not the case.
	 # That's why we start a new group here.
    os.setpgrp()
    os.execvpe( app_filename, sys.argv[1:], environment )
except os.error, e:
    e_errno, e_str = e
    sys.exit( e_str )
