!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.5.4	//
ACLOCAL	Makefile	/^ACLOCAL = ${SHELL} \/home\/galtekar\/src\/work\/logreplay\/missing --run aclocal-1.9$/;"	m
ACLOCAL_M4	Makefile	/^ACLOCAL_M4 = $(top_srcdir)\/aclocal.m4$/;"	m
AMDEP_FALSE	Makefile	/^AMDEP_FALSE = #$/;"	m
AMDEP_TRUE	Makefile	/^AMDEP_TRUE = $/;"	m
AMTAR	Makefile	/^AMTAR = ${SHELL} \/home\/galtekar\/src\/work\/logreplay\/missing --run tar$/;"	m
AM_CFLAGS	Makefile	/^AM_CFLAGS = -DUSE_FAST_LOGGING -DDEBUG_LEVEL=0 #-O4 -DNDEBUG$/;"	m
AR	Makefile	/^AR = ar$/;"	m
AUTOCONF	Makefile	/^AUTOCONF = ${SHELL} \/home\/galtekar\/src\/work\/logreplay\/missing --run autoconf$/;"	m
AUTOHEADER	Makefile	/^AUTOHEADER = ${SHELL} \/home\/galtekar\/src\/work\/logreplay\/missing --run autoheader$/;"	m
AUTOMAKE	Makefile	/^AUTOMAKE = ${SHELL} \/home\/galtekar\/src\/work\/logreplay\/missing --run automake-1.9$/;"	m
AWK	Makefile	/^AWK = gawk$/;"	m
CACHE_HT_SIZE	sendlog.c	29;"	d	file:
CACHE_TTL_NO_REPLY	sendlog.c	32;"	d	file:
CACHE_TTL_REPLY	sendlog.c	30;"	d	file:
CALL_WRAPPER	overlord.c	72;"	d	file:
CALL_WRAPPER_NORET	overlord.c	155;"	d	file:
CALL_WRAPPER_NORET_VARG	overlord.c	190;"	d	file:
CALL_WRAPPER_VARG	overlord.c	113;"	d	file:
CC	Makefile	/^CC = gcc$/;"	m
CCAS	Makefile	/^CCAS = gcc$/;"	m
CCASFLAGS	Makefile	/^CCASFLAGS = -g -O2$/;"	m
CCDEPMODE	Makefile	/^CCDEPMODE = depmode=gcc3$/;"	m
CCLD	Makefile	/^CCLD = $(CC)$/;"	m
CDPATH	Makefile	/^am__cd = CDPATH="$${ZSH_VERSION+.}$(PATH_SEPARATOR)" && cd$/;"	m
CFLAGS	Makefile	/^CFLAGS = -g -Wall$/;"	m
CLEANFILES	Makefile	/^CLEANFILES = core *.core *~ *.log.gz core.* *.ckpt$/;"	m
COMPILE	Makefile	/^COMPILE = $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) \\$/;"	m
CONFIG_CLEAN_FILES	Makefile	/^CONFIG_CLEAN_FILES =$/;"	m
CONFIG_HEADER	Makefile	/^CONFIG_HEADER = $(top_builddir)\/config.h$/;"	m
COSCHED_H	cosched.h	2;"	d
CPP	Makefile	/^CPP = gcc -E$/;"	m
CPPFLAGS	Makefile	/^CPPFLAGS = $/;"	m
CTAGS	Makefile	/^CTAGS = ctags$/;"	m
CXX	Makefile	/^CXX = g++$/;"	m
CXXCPP	Makefile	/^CXXCPP = g++ -E$/;"	m
CXXDEPMODE	Makefile	/^CXXDEPMODE = depmode=gcc3$/;"	m
CXXFLAGS	Makefile	/^CXXFLAGS = -g -O2$/;"	m
CYGPATH_W	Makefile	/^CYGPATH_W = echo$/;"	m
DEBUG	fast_logging.h	6;"	d
DEBUG	finish.c	14;"	d	file:
DEBUG	log.c	22;"	d	file:
DEBUG	lwrap_files.c	47;"	d	file:
DEBUG	lwrap_misc.c	41;"	d	file:
DEBUG	lwrap_procs.c	43;"	d	file:
DEBUG	lwrap_shmem.c	37;"	d	file:
DEBUG	lwrap_sigs.c	47;"	d	file:
DEBUG	lwrap_socks.c	43;"	d	file:
DEBUG	lwrap_threads.c	40;"	d	file:
DEBUG	msg_coding.c	50;"	d	file:
DEBUG	overlord.c	51;"	d	file:
DEBUG	sendlog.c	26;"	d	file:
DEBUG	start.c	43;"	d	file:
DEFAULT_INCLUDES	Makefile	/^DEFAULT_INCLUDES = -I. -I$(srcdir) -I$(top_builddir)$/;"	m
DEFS	Makefile	/^DEFS = -DHAVE_CONFIG_H$/;"	m
DEPDIR	Makefile	/^DEPDIR = .deps$/;"	m
DISTFILES	Makefile	/^DISTFILES = $(DIST_COMMON) $(DIST_SOURCES) $(TEXINFOS) $(EXTRA_DIST)$/;"	m
DIST_COMMON	Makefile	/^DIST_COMMON = README $(noinst_HEADERS) $(srcdir)\/Makefile.am \\$/;"	m
DIST_SOURCES	Makefile	/^DIST_SOURCES = $(liblog_la_SOURCES)$/;"	m
ECHO	Makefile	/^ECHO = echo$/;"	m
ECHO_C	Makefile	/^ECHO_C = $/;"	m
ECHO_N	Makefile	/^ECHO_N = -n$/;"	m
ECHO_T	Makefile	/^ECHO_T = $/;"	m
EGREP	Makefile	/^EGREP = grep -E$/;"	m
ETAGS	Makefile	/^ETAGS = etags$/;"	m
EXEEXT	Makefile	/^EXEEXT = $/;"	m
F77	Makefile	/^F77 = f95$/;"	m
FASTLOGENTRY	fast_logging.c	14;"	d	file:
FASTLOGENTRY	fast_logging.c	15;"	d	file:
FASTLOGENTRY	fast_logging.c	3;"	d	file:
FASTLOGENTRY	fast_logging.c	4;"	d	file:
FASTLOGENTRY	fast_logging.h	10;"	d
FASTLOGENTRY	fast_logging.h	14;"	d
FASTLOGENTRY	fast_logging.h	15;"	d
FASTLOGENTRY	fast_logging.h	9;"	d
FAST_LOGGING_H	fast_logging.h	2;"	d
FFLAGS	Makefile	/^FFLAGS = -g -O2$/;"	m
FINISH_H	finish.h	2;"	d
GET_SHM_CHUNK	fast_logging.h	78;"	d
GET_SHM_CHUNK_DATA	fast_logging.h	22;"	d
HEADERS	Makefile	/^HEADERS = $(noinst_HEADERS)$/;"	m
IFNAME_LEN	hosts.c	24;"	d	file:
INCLUDES	Makefile	/^INCLUDES = -I..\/libcommon -I..\/libckpt -I..\/logger$/;"	m
INIT_POINTERS	overlord.h	24;"	d
INSTALL	Makefile	/^INSTALL = \/usr\/bin\/install -c$/;"	m
INSTALL_DATA	Makefile	/^INSTALL_DATA = ${INSTALL} -m 644$/;"	m
INSTALL_HEADER	Makefile	/^INSTALL_HEADER = $(INSTALL_DATA)$/;"	m
INSTALL_PROGRAM	Makefile	/^	$(MAKE) $(AM_MAKEFLAGS) INSTALL_PROGRAM="$(INSTALL_STRIP_PROGRAM)" \\$/;"	m
INSTALL_PROGRAM	Makefile	/^INSTALL_PROGRAM = ${INSTALL}$/;"	m
INSTALL_PROGRAM_ENV	Makefile	/^	    echo "INSTALL_PROGRAM_ENV=STRIPPROG='$(STRIP)'"` install$/;"	m
INSTALL_SCRIPT	Makefile	/^INSTALL_SCRIPT = ${INSTALL}$/;"	m
INSTALL_STRIP_FLAG	Makefile	/^	  install_sh_PROGRAM="$(INSTALL_STRIP_PROGRAM)" INSTALL_STRIP_FLAG=-s \\$/;"	m
INSTALL_STRIP_PROGRAM	Makefile	/^INSTALL_STRIP_PROGRAM = ${SHELL} $(install_sh) -c -s$/;"	m
INVOKE_COSCHEDULER	cosched.h	62;"	d
LDFLAGS	Makefile	/^LDFLAGS = $/;"	m
LIBLOG_MAGIC_CODE_WORD	msg_coding.h	57;"	d
LIBLOG_MAX_DATAGRAM_LEN	msg_coding.h	60;"	d
LIBLOG_MAX_FD	msg_coding.h	61;"	d
LIBLOG_MAX_METADATA_LEN	msg_coding.h	59;"	d
LIBLOG_MAX_TAG_LEN	msg_coding.h	56;"	d
LIBLOG_MIN_METADATA_LEN	msg_coding.h	58;"	d
LIBLOG_PEER_NO_TAGS	msg_coding.h	/^  LIBLOG_PEER_NO_TAGS = 3,	\/\/ Should NOT send\/expect tags$/;"	e
LIBLOG_PEER_TAGS	msg_coding.h	/^  LIBLOG_PEER_TAGS = 2,		\/\/ Should send\/expect tags$/;"	e
LIBLOG_PEER_UNKNOWN	msg_coding.h	/^  LIBLOG_PEER_UNKNOWN = 1,	\/\/ Unconnected\/no info$/;"	e
LIBLOG_SOCKET_OTHER	msg_coding.h	/^  LIBLOG_SOCKET_OTHER = 1,	\/\/ Unused, File, Closed, etc.$/;"	e
LIBLOG_SOCKET_PIPE_DGRAM	msg_coding.h	/^  LIBLOG_SOCKET_PIPE_DGRAM = 4,	\/\/ Created with socketpair()$/;"	e
LIBLOG_SOCKET_PIPE_STREAM	msg_coding.h	/^  LIBLOG_SOCKET_PIPE_STREAM = 5,$/;"	e
LIBLOG_SOCKET_RAW	msg_coding.h	/^  LIBLOG_SOCKET_RAW = 6,	\/\/ Created with SOCK_RAW$/;"	e
LIBLOG_SOCKET_TCP	msg_coding.h	/^  LIBLOG_SOCKET_TCP = 3,	\/\/ Created with SOCK_STREAM$/;"	e
LIBLOG_SOCKET_UDP	msg_coding.h	/^  LIBLOG_SOCKET_UDP = 2,	\/\/ Created with SOCK_DGRAM$/;"	e
LIBLOG_UNKNOWN_TAG	msg_coding.h	62;"	d
LIBOBJS	Makefile	/^LIBOBJS = $/;"	m
LIBREPLAY	start.c	41;"	d	file:
LIBS	Makefile	/^LIBS = -lckpt -ldl $/;"	m
LIBTOOL	Makefile	/^LIBTOOL = $(SHELL) $(top_builddir)\/libtool$/;"	m
LINK	Makefile	/^LINK = $(LIBTOOL) --tag=CC --mode=link $(CCLD) $(AM_CFLAGS) $(CFLAGS) \\$/;"	m
LL_MD_INVALID	msg_coding.h	67;"	d
LL_MD_NOT_MAGIC	msg_coding.h	65;"	d
LL_MD_TRUNCATED	msg_coding.h	66;"	d
LN_S	Makefile	/^LN_S = ln -s$/;"	m
LOG	log.h	64;"	d
LOGGER_ROTATE	log.c	25;"	d	file:
LOG_AND_DELIVER_QUEUED_SIGNALS	lwrap_sigs.h	4;"	d
LOG_CONTEXT_SWITCH	cosched.h	18;"	d
LOG_CONTEXT_SWITCH	cosched.h	37;"	d
LOG_H	log.h	37;"	d
LOG_MUTEX	lwrap_threads.c	251;"	d	file:
LTCOMPILE	Makefile	/^LTCOMPILE = $(LIBTOOL) --tag=CC --mode=compile $(CC) $(DEFS) \\$/;"	m
LTLIBOBJS	Makefile	/^LTLIBOBJS = $/;"	m
LTLIBRARIES	Makefile	/^LTLIBRARIES = $(lib_LTLIBRARIES)$/;"	m
LWARP_SIGS	lwrap_sigs.h	2;"	d
LWRAP_H	lwrap.h	2;"	d
MAINTAINERCLEANFILES	Makefile	/^MAINTAINERCLEANFILES = Makefile.in$/;"	m
MAKEINFO	Makefile	/^MAKEINFO = ${SHELL} \/home\/galtekar\/src\/work\/logreplay\/missing --run makeinfo$/;"	m
MALLOC_DEBUG	overlord.c	52;"	d	file:
MAX_LENGTH	lwrap_socks.c	44;"	d	file:
MAX_NUM_INTERFACES	hosts.c	23;"	d	file:
NORMAL_INSTALL	Makefile	/^NORMAL_INSTALL = :$/;"	m
NORMAL_UNINSTALL	Makefile	/^NORMAL_UNINSTALL = :$/;"	m
OBJEXT	Makefile	/^OBJEXT = o$/;"	m
OVERLORD_H	overlord.h	2;"	d
PACKAGE	Makefile	/^PACKAGE = logreplay$/;"	m
PACKAGE_BUGREPORT	Makefile	/^PACKAGE_BUGREPORT = odb@cs.berkeley.edu$/;"	m
PACKAGE_NAME	Makefile	/^PACKAGE_NAME = logreplay$/;"	m
PACKAGE_STRING	Makefile	/^PACKAGE_STRING = logreplay 0.02$/;"	m
PACKAGE_TARNAME	Makefile	/^PACKAGE_TARNAME = logreplay$/;"	m
PACKAGE_VERSION	Makefile	/^PACKAGE_VERSION = 0.02$/;"	m
PATH_SEPARATOR	Makefile	/^PATH_SEPARATOR = :$/;"	m
POST_INSTALL	Makefile	/^POST_INSTALL = :$/;"	m
POST_UNINSTALL	Makefile	/^POST_UNINSTALL = :$/;"	m
POST_WRAPPER_CLEANUP	log.h	49;"	d
PRE_CALL_INIT	overlord.h	37;"	d
PRE_CALL_INIT	overlord.h	39;"	d
PRE_INSTALL	Makefile	/^PRE_INSTALL = :$/;"	m
PRE_UNINSTALL	Makefile	/^PRE_UNINSTALL = :$/;"	m
QUERY_TIMEOUT_S	sendlog.c	28;"	d	file:
RANLIB	Makefile	/^RANLIB = ranlib$/;"	m
ROTATE_LOG_IF_TIME	log.h	58;"	d
SEND_LOG_H	sendlog.h	2;"	d
SET_MAKE	Makefile	/^SET_MAKE = $/;"	m
SHELL	Makefile	/^SHELL = \/bin\/sh$/;"	m
SOURCES	Makefile	/^SOURCES = $(liblog_la_SOURCES)$/;"	m
START_H	start.h	2;"	d
STRIP	Makefile	/^STRIP = strip$/;"	m
STRIPPROG	Makefile	/^	    echo "INSTALL_PROGRAM_ENV=STRIPPROG='$(STRIP)'"` install$/;"	m
TRIVIAL_LOCAL_ADDR	hosts.c	22;"	d	file:
VERSION	Makefile	/^VERSION = 0.02$/;"	m
WRAPPERDEF	lwrap.h	15;"	d
WRAPPERDEF	lwrap.h	19;"	d
WRAPPERDEF	overlord.c	242;"	d	file:
WRAPPERDEF	overlord.c	246;"	d	file:
WRAPPERDEF	overlord.c	258;"	d	file:
WRAPPERDEF	overlord.c	262;"	d	file:
WRAPPERDEF	overlord.c	299;"	d	file:
WRAPPERDEF	overlord.c	303;"	d	file:
WRAPPERDEF	overlord.c	320;"	d	file:
WRAPPERDEF	overlord.c	324;"	d	file:
WRAPPERDEF	overlord.c	330;"	d	file:
WRAPPERDEF	overlord.c	334;"	d	file:
WRAPPERDEF	overlord.c	439;"	d	file:
WRAPPERDEF	overlord.c	443;"	d	file:
WRAPPERDEF_NORET	lwrap.h	16;"	d
WRAPPERDEF_NORET	lwrap.h	20;"	d
WRAPPERDEF_NORET	overlord.c	243;"	d	file:
WRAPPERDEF_NORET	overlord.c	247;"	d	file:
WRAPPERDEF_NORET	overlord.c	259;"	d	file:
WRAPPERDEF_NORET	overlord.c	263;"	d	file:
WRAPPERDEF_NORET	overlord.c	300;"	d	file:
WRAPPERDEF_NORET	overlord.c	304;"	d	file:
WRAPPERDEF_NORET	overlord.c	321;"	d	file:
WRAPPERDEF_NORET	overlord.c	325;"	d	file:
WRAPPERDEF_NORET	overlord.c	331;"	d	file:
WRAPPERDEF_NORET	overlord.c	335;"	d	file:
WRAPPERDEF_NORET	overlord.c	440;"	d	file:
WRAPPERDEF_NORET	overlord.c	447;"	d	file:
WRAPPERDEF_NORET_VARG	lwrap.h	18;"	d
WRAPPERDEF_NORET_VARG	lwrap.h	22;"	d
WRAPPERDEF_NORET_VARG	overlord.c	245;"	d	file:
WRAPPERDEF_NORET_VARG	overlord.c	249;"	d	file:
WRAPPERDEF_NORET_VARG	overlord.c	261;"	d	file:
WRAPPERDEF_NORET_VARG	overlord.c	265;"	d	file:
WRAPPERDEF_NORET_VARG	overlord.c	302;"	d	file:
WRAPPERDEF_NORET_VARG	overlord.c	306;"	d	file:
WRAPPERDEF_NORET_VARG	overlord.c	323;"	d	file:
WRAPPERDEF_NORET_VARG	overlord.c	327;"	d	file:
WRAPPERDEF_NORET_VARG	overlord.c	333;"	d	file:
WRAPPERDEF_NORET_VARG	overlord.c	337;"	d	file:
WRAPPERDEF_NORET_VARG	overlord.c	442;"	d	file:
WRAPPERDEF_NORET_VARG	overlord.c	455;"	d	file:
WRAPPERDEF_VARG	lwrap.h	17;"	d
WRAPPERDEF_VARG	lwrap.h	21;"	d
WRAPPERDEF_VARG	overlord.c	244;"	d	file:
WRAPPERDEF_VARG	overlord.c	248;"	d	file:
WRAPPERDEF_VARG	overlord.c	260;"	d	file:
WRAPPERDEF_VARG	overlord.c	264;"	d	file:
WRAPPERDEF_VARG	overlord.c	301;"	d	file:
WRAPPERDEF_VARG	overlord.c	305;"	d	file:
WRAPPERDEF_VARG	overlord.c	322;"	d	file:
WRAPPERDEF_VARG	overlord.c	326;"	d	file:
WRAPPERDEF_VARG	overlord.c	332;"	d	file:
WRAPPERDEF_VARG	overlord.c	336;"	d	file:
WRAPPERDEF_VARG	overlord.c	441;"	d	file:
WRAPPERDEF_VARG	overlord.c	451;"	d	file:
_GNU_SOURCE	lwrap_sigs.c	3;"	d	file:
__USE_GNU	lwrap_files.c	13;"	d	file:
__USE_GNU	lwrap_misc.c	14;"	d	file:
__USE_GNU	lwrap_procs.c	11;"	d	file:
__USE_GNU	lwrap_shmem.c	11;"	d	file:
__USE_GNU	lwrap_sigs.c	10;"	d	file:
__USE_GNU	lwrap_sigs.c	17;"	d	file:
__USE_GNU	lwrap_socks.c	13;"	d	file:
__USE_GNU	lwrap_threads.c	11;"	d	file:
__USE_GNU	overlord.c	48;"	d	file:
__USE_GNU	start.c	19;"	d	file:
__USE_LARGEFILE64	lwrap.h	3;"	d
__USE_LARGEFILE64	lwrap_files.c	17;"	d	file:
__USE_LARGEFILE64	overlord.c	12;"	d	file:
__USE_LARGEFILE64	overlord.h	3;"	d
__USE_LARGEFILE64	start.c	13;"	d	file:
__liblog_get_addr	hosts.c	/^in_addr_t HIDDEN __liblog_get_addr(void)$/;"	f
__ll_is_confusing_parent	start.c	/^HIDDEN int __ll_is_confusing_parent = 0;$/;"	v
__ll_last_errno	log.c	/^HIDDEN __thread int __ll_last_errno = 0;$/;"	v
_block_set	start.c	/^sigset_t _block_set;$/;"	v
_in_gdb	start.c	/^int _in_gdb = FALSE;	\/\/ FALSE, unless gdb sets to TRUE$/;"	v
_logger_port	sendlog.c	/^static int _logger_port = 0;	\/\/ The global well-known port.$/;"	v	file:
_my_tinfo	lwrap_threads.c	/^__thread thread_info_t* _my_tinfo = NULL;$/;"	v
_private_info	log.c	/^private_info_t _private_info;$/;"	v
_shared_info	lwrap_procs.c	/^shared_info_t* _shared_info;$/;"	v
_socket_info	msg_coding.c	/^static liblog_socket_info _socket_info[LIBLOG_MAX_FD+1];$/;"	v	file:
ac_ct_AR	Makefile	/^ac_ct_AR = ar$/;"	m
ac_ct_CC	Makefile	/^ac_ct_CC = gcc$/;"	m
ac_ct_CXX	Makefile	/^ac_ct_CXX = g++$/;"	m
ac_ct_F77	Makefile	/^ac_ct_F77 = f95$/;"	m
ac_ct_RANLIB	Makefile	/^ac_ct_RANLIB = ranlib$/;"	m
ac_ct_STRIP	Makefile	/^ac_ct_STRIP = strip$/;"	m
addr	sendlog.c	/^  struct in_addr addr;$/;"	m	struct:query_cache_entry	file:
advance_vclock	log.c	/^void HIDDEN advance_vclock() {$/;"	f
am__aclocal_m4_deps	Makefile	/^am__aclocal_m4_deps = $(top_srcdir)\/configure.in$/;"	m
am__cd	Makefile	/^am__cd = CDPATH="$${ZSH_VERSION+.}$(PATH_SEPARATOR)" && cd$/;"	m
am__configure_deps	Makefile	/^am__configure_deps = $(am__aclocal_m4_deps) $(CONFIGURE_DEPENDENCIES) \\$/;"	m
am__depfiles_maybe	Makefile	/^am__depfiles_maybe = depfiles$/;"	m
am__fastdepCC_FALSE	Makefile	/^am__fastdepCC_FALSE = #$/;"	m
am__fastdepCC_TRUE	Makefile	/^am__fastdepCC_TRUE = $/;"	m
am__fastdepCXX_FALSE	Makefile	/^am__fastdepCXX_FALSE = #$/;"	m
am__fastdepCXX_TRUE	Makefile	/^am__fastdepCXX_TRUE = $/;"	m
am__include	Makefile	/^am__include = include$/;"	m
am__installdirs	Makefile	/^am__installdirs = "$(DESTDIR)$(libdir)"$/;"	m
am__leading_dot	Makefile	/^am__leading_dot = .$/;"	m
am__quote	Makefile	/^am__quote = $/;"	m
am__strip_dir	Makefile	/^am__strip_dir = `echo $$p | sed -e 's|^.*\/||'`;$/;"	m
am__tar	Makefile	/^am__tar = ${AMTAR} chof - "$$tardir"$/;"	m
am__untar	Makefile	/^am__untar = ${AMTAR} xf -$/;"	m
am__vpath_adj	Makefile	/^am__vpath_adj = case $$p in \\$/;"	m
am__vpath_adj_setup	Makefile	/^am__vpath_adj_setup = srcdirstrip=`echo "$(srcdir)" | sed 's|.|.|g'`;$/;"	m
am_liblog_la_OBJECTS	Makefile	/^am_liblog_la_OBJECTS = log.lo hosts.lo sendlog.lo lwrap_misc.lo \\$/;"	m
arg	lwrap_threads.c	/^	void* arg;$/;"	m	struct:covert_arg	file:
bindir	Makefile	/^bindir = ${exec_prefix}\/bin$/;"	m
buf_to_shmem	log.c	/^int HIDDEN buf_to_shmem(const char* format, ...) {$/;"	f
build	Makefile	/^build = i686-redhat-linux-gnu$/;"	m
build_alias	Makefile	/^build_alias = $/;"	m
build_cpu	Makefile	/^build_cpu = i686$/;"	m
build_os	Makefile	/^build_os = linux-gnu$/;"	m
build_triplet	Makefile	/^build_triplet = i686-redhat-linux-gnu$/;"	m
build_vendor	Makefile	/^build_vendor = redhat$/;"	m
bytes_left	msg_coding.h	/^  size_t bytes_left;	\/\/ (TCP) Bytes left unread from current$/;"	m	struct:liblog_tcp_state
cache_init	sendlog.c	/^static void cache_init()$/;"	f	file:
cache_initialized	sendlog.c	/^static int cache_initialized = FALSE;$/;"	v	file:
cache_insert	sendlog.c	/^static void cache_insert( const struct in_addr addr,$/;"	f	file:
cache_lookup	sendlog.c	/^static int cache_lookup( int *result, const struct in_addr addr,$/;"	f	file:
calloc	overlord.c	/^void* calloc(size_t nmemb, size_t size) {$/;"	f
clear_socket_state	msg_coding.c	/^HIDDEN void clear_socket_state( int fd )$/;"	f
connect_to_logger	sendlog.c	/^int HIDDEN connect_to_logger(in_addr_t logger_addr, int logger_port) {$/;"	f
covert_arg	lwrap_threads.c	/^typedef struct covert_arg {$/;"	s	file:
covert_arg_t	lwrap_threads.c	/^} covert_arg_t;$/;"	t	file:
covert_signal_handler	lwrap_sigs.c	/^static void covert_signal_handler(int signum, siginfo_t *si, ucontext_t *uc) {$/;"	f	file:
covert_start_routine	lwrap_threads.c	/^static void* covert_start_routine(void* arg) {$/;"	f	file:
datadir	Makefile	/^datadir = ${prefix}\/share$/;"	m
depcomp	Makefile	/^depcomp = $(SHELL) $(top_srcdir)\/depcomp$/;"	m
depmode	Makefile	/^CCDEPMODE = depmode=gcc3$/;"	m
depmode	Makefile	/^CXXDEPMODE = depmode=gcc3$/;"	m
dir	Makefile	/^	    dir="\/$$dir"; \\$/;"	m
dir	Makefile	/^	    dir=''; \\$/;"	m
dir	Makefile	/^	  dir="`echo $$p | sed -e 's|\/[^\/]*$$||'`"; \\$/;"	m
dir	Makefile	/^	  dir=`echo "$$file" | sed -e 's,\/[^\/]*$$,,'`; \\$/;"	m
dir	Makefile	/^	  test "$$dir" != "$$p" || dir=.; \\$/;"	m
dup_socket_state	msg_coding.c	/^HIDDEN void dup_socket_state( int old_fd, int new_fd )$/;"	f
erase_md	msg_coding.c	/^static void erase_md( liblog_msg_metadata * md )$/;"	f	file:
exec_prefix	Makefile	/^exec_prefix = ${prefix}$/;"	m
f	Makefile	/^	    f=$(am__strip_dir) \\$/;"	m
f	Makefile	/^    $(srcdir)\/*) f=`echo "$$p" | sed "s|^$$srcdirstrip\/||"`;; \\$/;"	m
f	Makefile	/^    *) f=$$p;; \\$/;"	m
file	Makefile	/^	    $(srcdir)\/*) file=`echo "$$file" | sed "s|^$$srcdirstrip\/||"`;; \\$/;"	m
file	Makefile	/^	    $(top_srcdir)\/*) file=`echo "$$file" | sed "s|^$$topsrcdirstrip\/|$(top_builddir)\/|"`;; \\$/;"	m
free	overlord.c	/^void free(void* ptr) {$/;"	f
get_local_addr	hosts.c	/^static uint32_t get_local_addr(void)$/;"	f	file:
get_local_addr_eth	hosts.c	/^static uint32_t get_local_addr_eth(void)$/;"	f	file:
hash_func	sendlog.c	/^static unsigned hash_func( const struct in_addr addr,$/;"	f	file:
head	lwrap_sigs.c	/^struct tailhead head;$/;"	v
here	Makefile	/^	here=`$(am__cd) $(top_builddir) && pwd` \\$/;"	m
here	Makefile	/^	here=`pwd`; \\$/;"	m
host	Makefile	/^host = i686-redhat-linux-gnu$/;"	m
host_alias	Makefile	/^host_alias = $/;"	m
host_cpu	Makefile	/^host_cpu = i686$/;"	m
host_os	Makefile	/^host_os = linux-gnu$/;"	m
host_triplet	Makefile	/^host_triplet = i686-redhat-linux-gnu$/;"	m
host_vendor	Makefile	/^host_vendor = redhat$/;"	m
includedir	Makefile	/^includedir = ${prefix}\/include$/;"	m
infodir	Makefile	/^infodir = ${prefix}\/info$/;"	m
init_checkpointing	start.c	/^static void init_checkpointing() {$/;"	f	file:
init_fast_logging	fast_logging.c	/^void HIDDEN init_fast_logging() {$/;"	f
init_logging_pointers	overlord.c	/^void HIDDEN init_logging_pointers() {$/;"	f
init_main	start.c	/^static void init_main() {$/;"	f	file:
init_process_info	log.c	/^static void init_process_info(char *log_prefix,$/;"	f	file:
init_replay_pointers	overlord.c	/^void HIDDEN init_replay_pointers() {$/;"	f
init_scheduler	start.c	/^static void init_scheduler() {$/;"	f	file:
init_socket_info	msg_coding.c	/^HIDDEN void init_socket_info()$/;"	f
init_socket_state	msg_coding.c	/^static void init_socket_state( int fd )$/;"	f	file:
install_sh	Makefile	/^install_sh = \/home\/galtekar\/src\/work\/logreplay\/install-sh$/;"	m
install_sh_DATA	Makefile	/^install_sh_DATA = $(install_sh) -c -m 644$/;"	m
install_sh_PROGRAM	Makefile	/^	  install_sh_PROGRAM="$(INSTALL_STRIP_PROGRAM)" INSTALL_STRIP_FLAG=-s \\$/;"	m
install_sh_PROGRAM	Makefile	/^install_sh_PROGRAM = $(install_sh) -c$/;"	m
install_sh_SCRIPT	Makefile	/^install_sh_SCRIPT = $(install_sh) -c$/;"	m
install_signal_handlers	lwrap_sigs.c	/^void HIDDEN install_signal_handlers() {$/;"	f
is_in_libc	lwrap_threads.c	/^__thread int is_in_libc = 0;$/;"	v
is_in_library	overlord.c	/^__thread int is_in_library = 1;$/;"	v
libLTLIBRARIES_INSTALL	Makefile	/^libLTLIBRARIES_INSTALL = $(INSTALL)$/;"	m
lib_LTLIBRARIES	Makefile	/^lib_LTLIBRARIES = liblog.la$/;"	m
libdir	Makefile	/^libdir = ${exec_prefix}\/lib$/;"	m
libexecdir	Makefile	/^libexecdir = ${exec_prefix}\/libexec$/;"	m
liblog_drop_checkpoint	log.c	/^int HIDDEN liblog_drop_checkpoint( uint64_t vclock ) {$/;"	f
liblog_finish	finish.c	/^__attribute__((destructor)) void liblog_finish() {$/;"	f
liblog_la_DEPENDENCIES	Makefile	/^liblog_la_DEPENDENCIES = ..\/libcommon\/libcommon.la$/;"	m
liblog_la_LDFLAGS	Makefile	/^liblog_la_LDFLAGS = -shared -fPIC -version-info 0:0:0 -L..\/libckpt -L..\/libcommon -Wl,--export-dynamic #-Wl,-zinitfirst$/;"	m
liblog_la_LIBADD	Makefile	/^liblog_la_LIBADD = ..\/libcommon\/libcommon.la$/;"	m
liblog_la_OBJECTS	Makefile	/^liblog_la_OBJECTS = $(am_liblog_la_OBJECTS)$/;"	m
liblog_la_SOURCES	Makefile	/^liblog_la_SOURCES = log.c hosts.c sendlog.c lwrap_misc.c lwrap_files.c lwrap_shmem.c lwrap_socks.c lwrap_sigs.c lwrap_threads.c lwrap_procs.c overlord.c msg_coding.c fast_logging.c finish.c start.c$/;"	m
liblog_msg_metadata	msg_coding.h	/^typedef struct liblog_msg_metadata {$/;"	s
liblog_msg_metadata	msg_coding.h	/^} liblog_msg_metadata;$/;"	t
liblog_peer_info_t	msg_coding.h	/^} liblog_peer_info_t;$/;"	t
liblog_registered_port_info	msg_coding.h	/^typedef struct liblog_registered_port_info {$/;"	s
liblog_registered_port_info	msg_coding.h	/^} liblog_registered_port_info;$/;"	t
liblog_socket_info	msg_coding.h	/^typedef struct liblog_socket_info {$/;"	s
liblog_socket_info	msg_coding.h	/^} liblog_socket_info;$/;"	t
liblog_socket_state_t	msg_coding.h	/^} liblog_socket_state_t;$/;"	t
liblog_start	start.c	/^static __attribute__((constructor)) void liblog_start() {$/;"	f	file:
liblog_tcp_state	msg_coding.h	/^typedef struct liblog_tcp_state {$/;"	s
liblog_tcp_state	msg_coding.h	/^} liblog_tcp_state;$/;"	t
list	Makefile	/^	@set -x; list='$(lib_LTLIBRARIES)'; for p in $$list; do \\$/;"	m
list	Makefile	/^	list='$(DISTFILES)'; for file in $$list; do \\$/;"	m
list	Makefile	/^	list='$(SOURCES) $(HEADERS)  $(LISP) $(TAGS_FILES)'; \\$/;"	m
list	Makefile	/^	list='$(SOURCES) $(HEADERS) $(LISP) $(TAGS_FILES)'; \\$/;"	m
localstatedir	Makefile	/^localstatedir = ${prefix}\/var$/;"	m
log___fxstat	lwrap_files.c	/^int log___fxstat(int ver, int filedes, struct stat* buf) {$/;"	f
log___fxstat64	lwrap_files.c	/^int log___fxstat64(int ver, int filedes, struct stat64* buf) {$/;"	f
log___lxstat	lwrap_files.c	/^int log___lxstat(int ver, const char* file_name, struct stat* buf) {$/;"	f
log___lxstat64	lwrap_files.c	/^int log___lxstat64(int ver, const char* file_name, struct stat64* buf) {$/;"	f
log___xmknod	lwrap_files.c	/^int log___xmknod(int ver, const char *pathname, mode_t mode, dev_t* dev) {$/;"	f
log___xstat	lwrap_files.c	/^int log___xstat(int ver, const char *file_name, struct stat* buf) {$/;"	f
log___xstat64	lwrap_files.c	/^int log___xstat64(int ver, const char *file_name, struct stat64* buf) {$/;"	f
log_abort	lwrap_procs.c	/^void NORETURN log_abort() {$/;"	f
log_accept	lwrap_socks.c	/^int log_accept(int s, struct sockaddr *addr, socklen_t *addrlen) {$/;"	f
log_alarm	lwrap_sigs.c	/^unsigned int log_alarm(unsigned int seconds) {$/;"	f
log_and_deliver_queued_signals	lwrap_sigs.c	/^void HIDDEN log_and_deliver_queued_signals() {$/;"	f
log_bind	lwrap_socks.c	/^int log_bind(int sockfd, const struct sockaddr* my_addr, socklen_t addrlen) {$/;"	f
log_chdir	lwrap_files.c	/^int log_chdir(const char* path) {$/;"	f
log_chmod	lwrap_files.c	/^int log_chmod(const char *path, mode_t mode) {$/;"	f
log_close	lwrap_files.c	/^int log_close(int fd) {$/;"	f
log_closedir	lwrap_files.c	/^int log_closedir(DIR *dir) {$/;"	f
log_closelog	lwrap_misc.c	/^void log_closelog(void) {$/;"	f
log_connect	lwrap_socks.c	/^int log_connect(int  sockfd,  const  struct sockaddr *serv_addr, socklen_t$/;"	f
log_creat	lwrap_files.c	/^int log_creat(const char *path, mode_t mode) {$/;"	f
log_ctime	lwrap_misc.c	/^char* log_ctime(const time_t *timep) {$/;"	f
log_dirfd	lwrap_files.c	/^int log_dirfd(DIR *dir) {$/;"	f
log_dlopen	lwrap_files.c	/^void* log_dlopen(const char *filepath, int flag) {$/;"	f
log_dup	lwrap_files.c	/^int log_dup(int oldfd) {$/;"	f
log_dup2	lwrap_files.c	/^int log_dup2(int oldfd, int newfd) {$/;"	f
log_endprotoent	lwrap_socks.c	/^void log_endprotoent(void) {$/;"	f
log_endservent	lwrap_socks.c	/^void log_endservent(void) {$/;"	f
log_execl	lwrap_procs.c	/^int log_execl(const char *path, const char *arg, va_list ap) {$/;"	f
log_execvp	lwrap_procs.c	/^int log_execvp(const char *file, char *const argv[]) {$/;"	f
log_fchdir	lwrap_files.c	/^int log_fchdir(int fd) {$/;"	f
log_fchmod	lwrap_files.c	/^int log_fchmod(int fildes, mode_t mode) {$/;"	f
log_fclose	lwrap_files.c	/^int log_fclose(FILE *stream) {$/;"	f
log_fcntl	lwrap_files.c	/^int log_fcntl(int fd, int cmd, va_list ap) {$/;"	f
log_fdopen	lwrap_files.c	/^FILE* log_fdopen(int filedes, const char *mode) {$/;"	f
log_feof	lwrap_files.c	/^int log_feof(FILE* stream) {$/;"	f
log_ferror	lwrap_files.c	/^int log_ferror(FILE* stream) {$/;"	f
log_fflush	lwrap_files.c	/^int log_fflush(FILE *stream) {$/;"	f
log_fgetc	lwrap_files.c	/^int log_fgetc(FILE* stream) {$/;"	f
log_fgetpos	lwrap_files.c	/^int log_fgetpos(FILE* stream, fpos_t* pos) {$/;"	f
log_fgets	lwrap_files.c	/^char* log_fgets(char *s, int size, FILE* stream) {$/;"	f
log_fileno	lwrap_files.c	/^int log_fileno(FILE* stream) {$/;"	f
log_fopen	lwrap_files.c	/^FILE *log_fopen(const char *path, const char *mode) {$/;"	f
log_fopen64	lwrap_files.c	/^FILE* log_fopen64 (const char * filename, const char * modes) {$/;"	f
log_fork	lwrap_procs.c	/^pid_t log_fork(void) {$/;"	f
log_fprintf	lwrap_files.c	/^int log_fprintf(FILE *stream, const char *format, va_list args) {$/;"	f
log_fputc	lwrap_files.c	/^int log_fputc(int c, FILE *stream) {$/;"	f
log_fputs	lwrap_files.c	/^int log_fputs(const char *s, FILE *stream) {$/;"	f
log_fread	lwrap_files.c	/^size_t log_fread(void *ptr, size_t size, size_t nmemb, FILE *stream) {$/;"	f
log_freopen	lwrap_files.c	/^FILE* log_freopen(const char *path, const char *mode, FILE *stream) {$/;"	f
log_freopen64	lwrap_files.c	/^FILE* log_freopen64 (const char * filename, const char * modes, FILE * stream) {$/;"	f
log_fscanf	lwrap_files.c	/^int log_fscanf(FILE *stream, const char *format, va_list args) {$/;"	f
log_fseek	lwrap_files.c	/^int log_fseek(FILE* stream, long offset, int whence) {$/;"	f
log_ftell	lwrap_files.c	/^long log_ftell(FILE* stream) {$/;"	f
log_ftruncate	lwrap_files.c	/^int log_ftruncate(int fd, off_t length) {$/;"	f
log_fwrite	lwrap_files.c	/^size_t log_fwrite(const  void  *ptr,  size_t  size,  size_t  nmemb,  FILE$/;"	f
log_get_current_dir_name	lwrap_files.c	/^char * log_get_current_dir_name(void) {$/;"	f
log_getc	lwrap_files.c	/^int log_getc(FILE* stream) {$/;"	f
log_getchar	lwrap_files.c	/^int log_getchar(void) {$/;"	f
log_getcwd	lwrap_files.c	/^char* log_getcwd(char* buf, size_t size) {$/;"	f
log_getdelim	lwrap_files.c	/^ssize_t log_getdelim(char **lineptr, size_t *n, int delim, FILE *stream) {$/;"	f
log_getegid	lwrap_procs.c	/^gid_t log_getegid(void) {$/;"	f
log_getenv	lwrap_procs.c	/^char* log_getenv(const char *name)$/;"	f
log_geteuid	lwrap_procs.c	/^uid_t log_geteuid(void) {$/;"	f
log_getgid	lwrap_procs.c	/^gid_t log_getgid(void) {$/;"	f
log_getgrgid	lwrap_misc.c	/^struct group * log_getgrgid(gid_t gid) {$/;"	f
log_getgrnam	lwrap_misc.c	/^struct group * log_getgrnam(const char *name) {$/;"	f
log_gethostbyname	lwrap_socks.c	/^struct hostent* log_gethostbyname(const char *name) {$/;"	f
log_gethostname	lwrap_misc.c	/^int log_gethostname(char *name, size_t len) {$/;"	f
log_getline	lwrap_files.c	/^ssize_t log_getline(char **lineptr, size_t *n, FILE *stream) {$/;"	f
log_getpgid	lwrap_misc.c	/^pid_t log_getpgid(pid_t pid) {$/;"	f
log_getpgrp	lwrap_misc.c	/^pid_t log_getpgrp(void) {$/;"	f
log_getpid	lwrap_misc.c	/^pid_t log_getpid(void) {$/;"	f
log_getprotobyname	lwrap_socks.c	/^struct protoent* log_getprotobyname(const char *name) {$/;"	f
log_getprotobynumber	lwrap_socks.c	/^struct protoent* log_getprotobynumber(int proto) {$/;"	f
log_getprotoent	lwrap_socks.c	/^struct protoent* log_getprotoent(void) {$/;"	f
log_getpwnam	lwrap_misc.c	/^struct passwd* log_getpwnam(const char* name) {$/;"	f
log_getpwuid	lwrap_misc.c	/^struct passwd* log_getpwuid(uid_t uid) {$/;"	f
log_getrlimit	lwrap_misc.c	/^int log_getrlimit(int resource, struct rlimit *rlim) {$/;"	f
log_getrusage	lwrap_misc.c	/^int log_getrusage(int who, struct rusage *usage) {$/;"	f
log_gets	lwrap_files.c	/^char *log_gets(char *s) {$/;"	f
log_getservbyname	lwrap_socks.c	/^struct servent *log_getservbyname(const char *name, const char *proto) {$/;"	f
log_getservbyport	lwrap_socks.c	/^struct servent *log_getservbyport(int port, const char *proto) {$/;"	f
log_getservent	lwrap_socks.c	/^struct servent *log_getservent(void) {$/;"	f
log_getsockopt	lwrap_socks.c	/^int log_getsockopt(int  s, int level, int optname, void *optval, $/;"	f
log_gettid	lwrap_misc.c	/^pid_t log_gettid(void) {$/;"	f
log_gettimeofday	lwrap_misc.c	/^int log_gettimeofday(struct timeval *tv, struct timezone *tz) {$/;"	f
log_getuid	lwrap_procs.c	/^uid_t log_getuid(void) {$/;"	f
log_getwd	lwrap_files.c	/^char * log_getwd(char *buf) {$/;"	f
log_ioctl	lwrap_misc.c	/^int log_ioctl(int d, unsigned long int request, va_list args) {$/;"	f
log_isatty	lwrap_procs.c	/^int log_isatty(int desc) {$/;"	f
log_kill	lwrap_procs.c	/^int log_kill(pid_t pid, int sig) {$/;"	f
log_killpg	lwrap_procs.c	/^int log_killpg(int pgrp, int sig) {$/;"	f
log_link	lwrap_files.c	/^int log_link(const char *oldpath, const char *newpath) {$/;"	f
log_listen	lwrap_socks.c	/^int log_listen(int s, int backlog) {$/;"	f
log_lseek	lwrap_files.c	/^off_t log_lseek(int fildes, off_t offset, int whence) {$/;"	f
log_lseek64	lwrap_files.c	/^off_t log_lseek64(int fildes, off_t offset, int whence) {$/;"	f
log_mkdir	lwrap_files.c	/^int log_mkdir(const char *pathname, mode_t mode) {$/;"	f
log_mkfifo	lwrap_files.c	/^int log_mkfifo(const char *pathname, mode_t mode) {$/;"	f
log_mmap	lwrap_shmem.c	/^void* log_mmap(void* start, size_t length, int prot, int flags, int fd, off_t offset) {$/;"	f
log_mount	lwrap_files.c	/^int log_mount(const char *source, const char *target, const char *filesystemtype, unsigned long mountflags, const void *data) {$/;"	f
log_munmap	lwrap_shmem.c	/^int log_munmap(void* start, size_t length) {$/;"	f
log_nanosleep	lwrap_misc.c	/^int log_nanosleep(const struct timespec *req, struct timespec *rem) {$/;"	f
log_open	lwrap_files.c	/^int log_open(const char *path, int flags, va_list args) {$/;"	f
log_open64	lwrap_files.c	/^int log_open64(const char *path, int flags, va_list args) {$/;"	f
log_opendir	lwrap_files.c	/^DIR* log_opendir(const char *name) {$/;"	f
log_openlog	lwrap_misc.c	/^void log_openlog(const char *ident, int option, int facility) {$/;"	f
log_pipe	lwrap_socks.c	/^int log_pipe(int filedes[2]) {$/;"	f
log_poll	lwrap_socks.c	/^int log_poll(struct pollfd *ufds, nfds_t nfds, int timeout) {$/;"	f
log_pthread_create	lwrap_threads.c	/^int log_pthread_create(pthread_t  *  thread, const pthread_attr_t * attr, void *$/;"	f
log_pthread_exit	lwrap_threads.c	/^void log_pthread_exit(void *retval) {$/;"	f
log_pthread_join	lwrap_threads.c	/^int log_pthread_join(pthread_t th, void **thread_return) {$/;"	f
log_pthread_mutex_lock	lwrap_threads.c	/^int log_pthread_mutex_lock(pthread_mutex_t* mutex) {$/;"	f
log_pthread_mutex_unlock	lwrap_threads.c	/^int log_pthread_mutex_unlock(pthread_mutex_t* mutex) {$/;"	f
log_pthread_self	lwrap_misc.c	/^pthread_t log_pthread_self(void) {$/;"	f
log_putc	lwrap_files.c	/^int log_putc(int c, FILE *stream) {$/;"	f
log_rand	lwrap_misc.c	/^int log_rand() {$/;"	f
log_random	lwrap_misc.c	/^long log_random() {$/;"	f
log_read	lwrap_socks.c	/^ssize_t log_read(int fd, void* buf, size_t count) {$/;"	f
log_readdir	lwrap_files.c	/^struct dirent* log_readdir(DIR *dir) {$/;"	f
log_readdir64	lwrap_files.c	/^struct dirent64* log_readdir64(DIR *dir) {$/;"	f
log_readv	lwrap_files.c	/^ssize_t log_readv(int fd, const struct iovec* vector, int count) {$/;"	f
log_recv	lwrap_socks.c	/^ssize_t log_recv(int s, void *buf, size_t len, int flags) {$/;"	f
log_recvfrom	lwrap_socks.c	/^ssize_t log_recvfrom(int s, void *buf, size_t len, int flags,$/;"	f
log_rename	lwrap_files.c	/^int log_rename(const char *oldpath, const char *newpath) {$/;"	f
log_rewinddir	lwrap_files.c	/^void log_rewinddir(DIR *dir) {$/;"	f
log_rmdir	lwrap_files.c	/^int log_rmdir(const char *pathname) {$/;"	f
log_scandir	lwrap_files.c	/^int log_scandir(const char *dir, struct dirent ***namelist,$/;"	f
log_seekdir	lwrap_files.c	/^void log_seekdir(DIR *dir, off_t offset) {$/;"	f
log_select	lwrap_socks.c	/^int log_select(int   n,   fd_set   *readfds,  fd_set  *writefds,  fd_set$/;"	f
log_send	lwrap_socks.c	/^ssize_t log_send(int socket, const void *msg, size_t len, int flags) {$/;"	f
log_sendto	lwrap_socks.c	/^ssize_t log_sendto(int  socket,  const  void *msg, size_t len, int flags, const$/;"	f
log_setbuf	lwrap_files.c	/^void log_setbuf(FILE *stream, char *buf) {$/;"	f
log_setbuffer	lwrap_files.c	/^void log_setbuffer(FILE *stream, char *buf, size_t size) {$/;"	f
log_setfsgid	lwrap_procs.c	/^int log_setfsgid(uid_t fsgid) {$/;"	f
log_setfsuid	lwrap_procs.c	/^int log_setfsuid(uid_t fsuid) {$/;"	f
log_setgid	lwrap_procs.c	/^int log_setgid(gid_t gid) {$/;"	f
log_sethostname	lwrap_misc.c	/^int log_sethostname(const char *name, size_t len) {$/;"	f
log_setitimer	lwrap_sigs.c	/^int log_setitimer(int which, const struct itimerval *value,$/;"	f
log_setlinebuf	lwrap_files.c	/^void log_setlinebuf(FILE *stream) {$/;"	f
log_setpgid	lwrap_procs.c	/^int log_setpgid(pid_t pid, pid_t pgid) {$/;"	f
log_setpgrp	lwrap_procs.c	/^int log_setpgrp(void) {$/;"	f
log_setprotoent	lwrap_socks.c	/^void log_setprotoent(int stayopen) {$/;"	f
log_setregid	lwrap_procs.c	/^int log_setregid(gid_t rgid, gid_t egid) {$/;"	f
log_setreuid	lwrap_procs.c	/^int log_setreuid(uid_t ruid, uid_t euid) {$/;"	f
log_setservent	lwrap_socks.c	/^void log_setservent(int stayopen) {$/;"	f
log_setsid	lwrap_procs.c	/^pid_t log_setsid(void) {$/;"	f
log_setsockopt	lwrap_socks.c	/^int log_setsockopt(int s, int  level,  int  optname,  $/;"	f
log_setuid	lwrap_procs.c	/^int log_setuid(uid_t uid) {$/;"	f
log_setvbuf	lwrap_files.c	/^int log_setvbuf(FILE *stream, char *buf, int mode , size_t size) {$/;"	f
log_shmat	lwrap_shmem.c	/^void* log_shmat(int shmid, const void *shmaddr, int shmflg) {$/;"	f
log_shmdt	lwrap_shmem.c	/^int log_shmdt(const void *shmaddr) {$/;"	f
log_shmget	lwrap_shmem.c	/^int log_shmget(key_t key, size_t size, int shmflg) {$/;"	f
log_sigaction	lwrap_sigs.c	/^int log_sigaction(int signum, const struct sigaction *act, struct sigaction$/;"	f
log_signal	lwrap_sigs.c	/^sighandler_t log_signal(int signum, sighandler_t handler) {$/;"	f
log_sigpending	lwrap_sigs.c	/^int log_sigpending(sigset_t *set) {$/;"	f
log_sigprocmask	lwrap_sigs.c	/^int log_sigprocmask(int how, const sigset_t *set, sigset_t *oldset) {$/;"	f
log_sigsuspend	lwrap_sigs.c	/^int log_sigsuspend(const sigset_t *mask) {$/;"	f
log_sleep	lwrap_misc.c	/^unsigned int log_sleep(unsigned int seconds) {$/;"	f
log_socket	lwrap_socks.c	/^int log_socket(int domain, int type, int protocol) {$/;"	f
log_socketpair	lwrap_socks.c	/^int log_socketpair(int domain, int type, int protocol, int sv[2]) {$/;"	f
log_syslog	lwrap_misc.c	/^void log_syslog(int priority, const char *format, va_list ap) {$/;"	f
log_system	lwrap_procs.c	/^int log_system(const char* string) {$/;"	f
log_tcgetpgrp	lwrap_procs.c	/^pid_t log_tcgetpgrp(int fd) {$/;"	f
log_tcsetpgrp	lwrap_procs.c	/^int log_tcsetpgrp(int fd, pid_t pgrp) {$/;"	f
log_telldir	lwrap_files.c	/^off_t log_telldir(DIR *dir) {$/;"	f
log_time	lwrap_misc.c	/^time_t log_time(time_t *t) {$/;"	f
log_truncate	lwrap_files.c	/^int log_truncate(const char *path, off_t length) {$/;"	f
log_umask	lwrap_files.c	/^mode_t log_umask(mode_t mask) {$/;"	f
log_umount	lwrap_files.c	/^int log_umount(const char *target) {$/;"	f
log_umount2	lwrap_files.c	/^int log_umount2(const char *target, int flags) {$/;"	f
log_uname	lwrap_misc.c	/^int log_uname(struct utsname *buf) {$/;"	f
log_ungetc	lwrap_files.c	/^int log_ungetc(int c, FILE *stream) {$/;"	f
log_unlink	lwrap_files.c	/^int log_unlink(const char* pathname) {$/;"	f
log_utime	lwrap_files.c	/^int log_utime(const char *filename, const struct utimbuf *buf) {$/;"	f
log_vfprintf	lwrap_files.c	/^int log_vfprintf(FILE *stream, const char *format, va_list ap) {$/;"	f
log_vfscanf	lwrap_files.c	/^int log_vfscanf(FILE *stream, const char *format, va_list ap) {$/;"	f
log_vsyslog	lwrap_misc.c	/^void log_vsyslog(int priority, const char *format, va_list ap) {$/;"	f
log_wait	lwrap_procs.c	/^pid_t log_wait(int *status) {$/;"	f
log_waitpid	lwrap_procs.c	/^pid_t log_waitpid(pid_t pid, int* status, int options) {$/;"	f
log_write	lwrap_socks.c	/^ssize_t log_write(int fd, const void* buf, size_t count) {$/;"	f
log_writev	lwrap_files.c	/^ssize_t log_writev(int fd, const struct iovec* vector, int count) {$/;"	f
logger_rotate	log.c	/^static int logger_rotate( )$/;"	f	file:
malloc	overlord.c	/^void* malloc(size_t size) {$/;"	f
malloc	sendlog.c	23;"	d	file:
mandir	Makefile	/^mandir = ${prefix}\/man$/;"	m
md	msg_coding.h	/^  liblog_msg_metadata md;	\/\/ (TCP) Metadata from current send chunk$/;"	m	struct:liblog_tcp_state
md_buf	msg_coding.h	/^  char md_buf[LIBLOG_MAX_METADATA_LEN];	\/\/ (TCP) Parial metadata read$/;"	m	struct:liblog_tcp_state
md_len	msg_coding.h	/^  size_t md_len;	\/\/ (TCP) Number of bytes read into md_buf$/;"	m	struct:liblog_tcp_state
mkdir_p	Makefile	/^mkdir_p = mkdir -p --$/;"	m
mkinstalldirs	Makefile	/^mkinstalldirs = $(install_sh) -d$/;"	m
msg_len	msg_coding.h	/^  size_t msg_len;	\/\/ Length of original message, in bytes.$/;"	m	struct:liblog_msg_metadata
new_log	log.c	/^static int new_log( uint64_t vclock )$/;"	f	file:
new_registered_info	msg_coding.c	/^static liblog_registered_port_info * new_registered_info( int port,$/;"	f	file:
new_tcp_info	msg_coding.c	/^static liblog_tcp_state * new_tcp_info()$/;"	f	file:
noinst_HEADERS	Makefile	/^noinst_HEADERS = log.h sendlog.h lwrap_sigs.h overlord.h cosched.h msg_coding.h fast_logging.h finish.h start.h$/;"	m
num_fastlogentries	fast_logging.c	/^HIDDEN int num_fastlogentries = 0;$/;"	v
oldincludedir	Makefile	/^oldincludedir = \/usr\/include$/;"	m
orig_start_routine	lwrap_threads.c	/^	void*  (*orig_start_routine)(void*);$/;"	m	struct:covert_arg	file:
overlord_should_call_through	overlord.c	/^__thread int overlord_should_call_through = 0;$/;"	v
p	Makefile	/^	  p=$(am__strip_dir) \\$/;"	m
peer_info	msg_coding.h	/^  liblog_peer_info_t peer_info;	\/\/ Should we send or expect tags?$/;"	m	struct:liblog_socket_info
pkgdatadir	Makefile	/^pkgdatadir = $(datadir)\/logreplay$/;"	m
pkgincludedir	Makefile	/^pkgincludedir = $(includedir)\/logreplay$/;"	m
pkglibdir	Makefile	/^pkglibdir = $(libdir)\/logreplay$/;"	m
port	msg_coding.h	/^  int port;$/;"	m	struct:liblog_registered_port_info
port	sendlog.c	/^  int port;$/;"	m	struct:query_cache_entry	file:
post_restart_handler	start.c	/^static void post_restart_handler(void *arg) {$/;"	f	file:
pre_call_init	overlord.c	/^static void pre_call_init() {$/;"	f	file:
prefix	Makefile	/^prefix = \/usr\/local$/;"	m
prep_for_gdb	start.c	/^static void prep_for_gdb() {$/;"	f	file:
print_buf	msg_coding.c	/^static void print_buf( char const * prefix, char const * buf, size_t buf_len )$/;"	f	file:
proc_exit_cleanup	finish.c	/^static void proc_exit_cleanup() {$/;"	f	file:
program_transform_name	Makefile	/^program_transform_name = s,x,x,$/;"	m
protocol	msg_coding.h	/^  char * protocol;	\/\/ Only use literals here, so we don't have to$/;"	m	struct:liblog_registered_port_info
protocol	sendlog.c	/^  char * protocol;	$/;"	m	struct:query_cache_entry	file:
query_cache_entry	sendlog.c	/^typedef struct query_cache_entry {$/;"	s	file:
query_cache_entry	sendlog.c	/^} query_cache_entry;$/;"	t	file:
query_free_list	sendlog.c	/^static query_list query_free_list;$/;"	v	file:
query_list	sendlog.c	/^typedef LIST_HEAD( query_list, query_cache_entry ) query_list;$/;"	t	file:
query_remote_logger	sendlog.c	/^HIDDEN int query_remote_logger( const struct in_addr logger_addr,$/;"	f
query_result	sendlog.c	/^  int query_result;	\/\/ boolean$/;"	m	struct:query_cache_entry	file:
query_table	sendlog.c	/^static query_list query_table[CACHE_HT_SIZE];$/;"	v	file:
read_metadata	msg_coding.c	/^static int read_metadata( liblog_msg_metadata *md,$/;"	f	file:
read_stream_data	msg_coding.c	/^static ssize_t read_stream_data( int fd, char * buf, size_t buf_len,$/;"	f	file:
read_stream_metadata	msg_coding.c	/^static ssize_t read_stream_metadata( int fd, int buf_len, int flags,$/;"	f	file:
realloc	overlord.c	/^void* realloc(void* ptr, size_t size) {$/;"	f
recv_wrapped_datagram	msg_coding.c	/^static ssize_t recv_wrapped_datagram( int fd, char * buf, size_t buf_len,$/;"	f	file:
recv_wrapped_msg	msg_coding.c	/^HIDDEN ssize_t recv_wrapped_msg( int fd, char * buf, size_t buf_len,$/;"	f
recv_wrapped_stream	msg_coding.c	/^static ssize_t recv_wrapped_stream( int fd, char * buf, size_t buf_len,$/;"	f	file:
refs	msg_coding.h	/^  int refs;	\/\/ Simple reference counter  $/;"	m	struct:liblog_registered_port_info
refs	msg_coding.h	/^  int refs;	\/\/ Simple reference counter$/;"	m	struct:liblog_tcp_state
register_port	sendlog.c	/^HIDDEN void register_port( int port, char* protocol )$/;"	f
register_socket	msg_coding.c	/^HIDDEN void register_socket( int fd, char *caller )$/;"	f
registered_info	msg_coding.h	/^  liblog_registered_port_info * registered_info;$/;"	m	struct:liblog_socket_info
rotate_log_if_time	log.c	/^void HIDDEN rotate_log_if_time() {$/;"	f
save_signal_handler	lwrap_sigs.c	/^static int save_signal_handler(int sig, const struct sigaction* act,$/;"	f	file:
save_thread_kernel_context	lwrap_threads.c	/^void HIDDEN save_thread_kernel_context() {$/;"	f
sbindir	Makefile	/^sbindir = ${exec_prefix}\/sbin$/;"	m
select_wrapper	sendlog.c	/^static int select_wrapper( struct timeval deadline, int fd, int is_read )$/;"	f	file:
send_log_close_msg	sendlog.c	/^void HIDDEN send_log_close_msg(char* log_str, int64_t vclock) {$/;"	f
send_log_entry_msg	sendlog.c	/^void HIDDEN send_log_entry_msg(char *log_str, int64_t vclock) {$/;"	f
send_log_flush_msg	sendlog.c	/^void HIDDEN send_log_flush_msg(int64_t vclock) {$/;"	f
send_new_log_msg	sendlog.c	/^void HIDDEN send_new_log_msg(int64_t vclock) {$/;"	f
send_to_server	sendlog.c	/^void HIDDEN send_to_server(LogMsgHdr* hdr, char* data, size_t data_size)  {$/;"	f
send_wrapped_msg	msg_coding.c	/^HIDDEN ssize_t send_wrapped_msg( int fd, char const * buf,$/;"	f
set_socket_state	msg_coding.c	/^HIDDEN void set_socket_state( int fd, int state )$/;"	f
sharedstatedir	Makefile	/^sharedstatedir = ${prefix}\/com$/;"	m
should_recv_tagged	msg_coding.c	/^HIDDEN int should_recv_tagged( int fd )$/;"	f
should_send_tagged	msg_coding.c	/^HIDDEN int should_send_tagged( int fd, const struct sockaddr *to,$/;"	f
sig_bus_handler	lwrap_sigs.c	/^static void sig_bus_handler(int signum, siginfo_t *sip, ucontext_t *scp) {$/;"	f	file:
sig_segv_handler	lwrap_sigs.c	/^static void sig_segv_handler(int signum, siginfo_t *sip, ucontext_t *scp) {$/;"	f	file:
srcdir	Makefile	/^srcdir = .$/;"	m
srcdirstrip	Makefile	/^am__vpath_adj_setup = srcdirstrip=`echo "$(srcdir)" | sed 's|.|.|g'`;$/;"	m
start_banner	start.c	/^static void start_banner() {$/;"	f	file:
start_logging	log.c	/^void HIDDEN start_logging() {$/;"	f
state	msg_coding.h	/^  liblog_socket_state_t state;$/;"	m	struct:liblog_socket_info
subdir	Makefile	/^subdir = liblog$/;"	m
sysconfdir	Makefile	/^sysconfdir = ${prefix}\/etc$/;"	m
tag	msg_coding.h	/^  char tag[LIBLOG_MAX_TAG_LEN+1];	\/\/ sender tag$/;"	m	struct:liblog_msg_metadata
tags	Makefile	/^	tags=; \\$/;"	m
target_alias	Makefile	/^target_alias = $/;"	m
tcp_state	msg_coding.h	/^  liblog_tcp_state * tcp_state;$/;"	m	struct:liblog_socket_info
thread_exit_cleanup	lwrap_threads.c	/^static void thread_exit_cleanup() {$/;"	f	file:
timeout_us	sendlog.c	/^  uint64_t timeout_us;	\/\/ Use get_cpu_micros()$/;"	m	struct:query_cache_entry	file:
top_builddir	Makefile	/^top_builddir = ..$/;"	m
top_srcdir	Makefile	/^top_srcdir = ..$/;"	m
topsrcdirstrip	Makefile	/^	topsrcdirstrip=`echo "$(top_srcdir)" | sed 's|.|.|g'`; \\$/;"	m
transform	Makefile	/^transform = $(program_transform_name)$/;"	m
unique	Makefile	/^	  test -n "$$unique" || unique=$$empty_fix; \\$/;"	m
unique	Makefile	/^	unique=`for i in $$list; do \\$/;"	m
unregister_port	sendlog.c	/^HIDDEN void unregister_port( int port, char* protocol )$/;"	f
vclock	msg_coding.h	/^  uint64_t vclock;		\/\/ sender vclock at send time (host byte order)$/;"	m	struct:liblog_msg_metadata
write_errno_log_entry	log.c	/^void HIDDEN write_errno_log_entry(int val) {$/;"	f
write_metadata	msg_coding.c	/^static size_t write_metadata( char * buf, size_t buf_len,$/;"	f	file:
